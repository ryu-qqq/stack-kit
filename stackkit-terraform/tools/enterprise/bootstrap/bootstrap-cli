#!/usr/bin/env bash
set -euo pipefail

# =========================================
# StackKit Enterprise Bootstrap CLI
# Intelligent project initialization with org governance
# =========================================

# Colors and icons
RED='\033[0;31m'; GREEN='\033[0;32m'; YELLOW='\033[1;33m'; BLUE='\033[0;34m'; NC='\033[0m'
INFO="‚ÑπÔ∏è"; OK="‚úÖ"; ERR="‚ùå"; WARN="‚ö†Ô∏è"; ROCKET="üöÄ"

log() { echo -e "${BLUE}${INFO} $*${NC}"; }
ok() { echo -e "${GREEN}${OK} $*${NC}"; }
warn() { echo -e "${YELLOW}${WARN} $*${NC}"; }
fail() { echo -e "${RED}${ERR} $*${NC}"; exit 1; }
rocket() { echo -e "${GREEN}${ROCKET} $*${NC}"; }

# Paths
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
ENTERPRISE_ROOT="$(cd "$SCRIPT_DIR/.." && pwd)"
TOOLS_ROOT="$(cd "$ENTERPRISE_ROOT/.." && pwd)"
STACKKIT_ROOT="$(cd "$TOOLS_ROOT/.." && pwd)"

# Configuration paths
CONFIG_DIR="$ENTERPRISE_ROOT/config"
TEMPLATES_DIR="$ENTERPRISE_ROOT/templates"
GOVERNANCE_DIR="$ENTERPRISE_ROOT/governance"
DETECTORS_DIR="$SCRIPT_DIR/detectors"

# Default values
DEFAULT_ORG="${BOOTSTRAP_ORG:-}"
DEFAULT_REGION="ap-northeast-2"
DEFAULT_ENVIRONMENT="dev"

usage() {
  cat <<EOF
${ROCKET} StackKit Enterprise Bootstrap CLI

Initialize enterprise projects with intelligent template selection and governance

COMMANDS:
  init        Initialize new team project
  update      Update existing project with latest templates
  validate    Validate project compliance
  templates   Manage template registry
  config      Manage configuration hierarchy

INIT OPTIONS:
  --team TEAM             Team name (required)
  --project PROJECT       Project name (auto-generated if not provided)
  --tech-stack STACK      Technology stack (comma-separated)
  --compliance FRAMEWORKS Compliance requirements (comma-separated)
  --environment ENV       Target environment (dev|staging|prod)
  --org ORG              Organization name
  --region REGION        AWS region
  --output-dir DIR       Project output directory
  --dry-run              Preview changes without creating files
  --interactive          Interactive mode with guided questions

EXAMPLES:
  # Basic team project initialization
  $(basename "$0") init --team backend-services --tech-stack nodejs,postgres

  # Full enterprise project with compliance
  $(basename "$0") init \\
    --team data-platform \\
    --project user-analytics \\
    --tech-stack python,kafka,elasticsearch \\
    --compliance sox,gdpr \\
    --environment prod

  # Interactive mode for guided setup
  $(basename "$0") init --interactive

  # Dry run to preview changes
  $(basename "$0") init --team frontend --tech-stack react --dry-run

CONFIGURATION:
  Environment variables:
    BOOTSTRAP_ORG          Default organization name
    BOOTSTRAP_TEMPLATES    Custom templates directory
    BOOTSTRAP_CONFIG       Custom config directory

  Configuration files are loaded in this order (later overrides earlier):
    1. Organization config: $CONFIG_DIR/hierarchy/org-\${ORG}.yml
    2. Team config: $CONFIG_DIR/hierarchy/team-\${TEAM}.yml  
    3. Environment config: $CONFIG_DIR/hierarchy/env-\${ENV}.yml
    4. Project config: Generated based on selections
EOF
}

# Requirement detection system
detect_requirements() {
  local tech_stack="$1"
  local team="$2"
  local compliance="${3:-}"
  
  log "Analyzing requirements for team '$team' with tech stack: $tech_stack"
  
  # Run detectors
  local detection_result
  detection_result=$(python3 "$DETECTORS_DIR/requirement_detector.py" \
    --tech-stack "$tech_stack" \
    --team "$team" \
    --compliance "$compliance" 2>/dev/null || echo "{}")
  
  echo "$detection_result"
}

# Template selection engine
select_templates() {
  local requirements="$1"
  
  log "Selecting optimal templates based on requirements"
  
  local template_selection
  template_selection=$(python3 "$DETECTORS_DIR/template_selector.py" \
    --requirements "$requirements" \
    --templates-dir "$TEMPLATES_DIR" 2>/dev/null || echo "[]")
  
  echo "$template_selection"
}

# Configuration hierarchy loader
load_configurations() {
  local org="$1"
  local team="$2" 
  local environment="$3"
  local project="$4"
  
  log "Loading configuration hierarchy: $org ‚Üí $team ‚Üí $environment ‚Üí $project"
  
  python3 "$CONFIG_DIR/hierarchy/config_loader.py" \
    --org "$org" \
    --team "$team" \
    --environment "$environment" \
    --project "$project" \
    --config-dir "$CONFIG_DIR/hierarchy"
}

# Project scaffolding
scaffold_project() {
  local project_dir="$1"
  local templates="$2"
  local config="$3"
  local dry_run="${4:-false}"
  
  if [ "$dry_run" = "true" ]; then
    log "DRY RUN: Would scaffold project at: $project_dir"
    echo "$templates" | python3 -c "
import sys, json
templates = json.load(sys.stdin)
for template in templates:
    print(f'  - Template: {template.get(\"name\", \"unknown\")} ({template.get(\"type\", \"generic\")})')
"
    return 0
  fi
  
  log "Scaffolding project at: $project_dir"
  mkdir -p "$project_dir"
  
  # Generate project structure using templates and config
  python3 "$SCRIPT_DIR/scaffolder.py" \
    --output-dir "$project_dir" \
    --templates "$templates" \
    --config "$config"
}

# Policy validation
validate_compliance() {
  local project_dir="$1"
  local config="$2"
  
  log "Validating project compliance"
  
  python3 "$GOVERNANCE_DIR/validators/compliance_checker.py" \
    --project-dir "$project_dir" \
    --config "$config"
}

# Interactive mode
interactive_init() {
  echo -e "\n${ROCKET} Welcome to StackKit Enterprise Bootstrap - Interactive Mode\n"
  
  # Team selection
  echo "üìã Step 1: Team Information"
  read -p "Team name: " team
  [ -z "$team" ] && fail "Team name is required"
  
  # Project name (optional)
  echo -e "\nüì¶ Step 2: Project Details"
  read -p "Project name (leave empty for auto-generation): " project
  
  # Technology stack
  echo -e "\n‚öôÔ∏è Step 3: Technology Stack"
  echo "Available stacks: nodejs, python, java, go, react, vue, postgres, mysql, redis, kafka, kubernetes, terraform"
  read -p "Technology stack (comma-separated): " tech_stack
  [ -z "$tech_stack" ] && fail "Technology stack is required"
  
  # Compliance requirements
  echo -e "\nüõ°Ô∏è Step 4: Compliance (Optional)"
  echo "Available frameworks: sox, gdpr, pci, hipaa, fips"
  read -p "Compliance frameworks (comma-separated, leave empty if none): " compliance
  
  # Environment
  echo -e "\nüåç Step 5: Environment"
  echo "Available environments: dev, staging, prod"
  read -p "Target environment [dev]: " environment
  environment=${environment:-dev}
  
  # Organization
  echo -e "\nüè¢ Step 6: Organization"
  read -p "Organization name [${DEFAULT_ORG:-auto-detect}]: " org
  org=${org:-$DEFAULT_ORG}
  
  # Confirm selections
  echo -e "\nüìã Configuration Summary:"
  echo "  Team: $team"
  echo "  Project: ${project:-auto-generated}"
  echo "  Tech Stack: $tech_stack"
  echo "  Compliance: ${compliance:-none}"
  echo "  Environment: $environment"
  echo "  Organization: ${org:-auto-detect}"
  
  read -p $'\n'"Proceed with this configuration? (y/N): " confirm
  [[ "$confirm" =~ ^[Yy]$ ]] || { log "Aborted by user"; exit 0; }
  
  # Execute init with collected parameters
  exec "$0" init \
    --team "$team" \
    ${project:+--project "$project"} \
    --tech-stack "$tech_stack" \
    ${compliance:+--compliance "$compliance"} \
    --environment "$environment" \
    ${org:+--org "$org"}
}

# Main init command
cmd_init() {
  local team="" project="" tech_stack="" compliance="" environment="$DEFAULT_ENVIRONMENT"
  local org="$DEFAULT_ORG" region="$DEFAULT_REGION" output_dir="" dry_run=false
  
  # Parse arguments
  while [[ $# -gt 0 ]]; do
    case $1 in
      --team) team="$2"; shift 2 ;;
      --project) project="$2"; shift 2 ;;
      --tech-stack) tech_stack="$2"; shift 2 ;;
      --compliance) compliance="$2"; shift 2 ;;
      --environment) environment="$2"; shift 2 ;;
      --org) org="$2"; shift 2 ;;
      --region) region="$2"; shift 2 ;;
      --output-dir) output_dir="$2"; shift 2 ;;
      --dry-run) dry_run=true; shift ;;
      --interactive) interactive_init ;;
      -h|--help) usage; exit 0 ;;
      *) fail "Unknown option: $1" ;;
    esac
  done
  
  # Validate required parameters
  [ -z "$team" ] && fail "Team name is required (--team)"
  [ -z "$tech_stack" ] && fail "Technology stack is required (--tech-stack)"
  
  # Auto-detect organization if not provided
  if [ -z "$org" ]; then
    if [ -f "$STACKKIT_ROOT/.org-name" ]; then
      org=$(cat "$STACKKIT_ROOT/.org-name")
      log "Auto-detected organization: $org"
    else
      org="default"
      warn "No organization specified, using: $org"
    fi
  fi
  
  # Auto-generate project name if not provided
  if [ -z "$project" ]; then
    project="${team}-service-$(date +%s)"
    log "Auto-generated project name: $project"
  fi
  
  # Set output directory
  if [ -z "$output_dir" ]; then
    output_dir="$(pwd)/${project}"
  fi
  
  log "Initializing enterprise project: $project"
  log "Team: $team | Tech Stack: $tech_stack | Environment: $environment"
  
  # Step 1: Detect requirements
  local requirements
  requirements=$(detect_requirements "$tech_stack" "$team" "$compliance")
  
  # Step 2: Select templates
  local templates
  templates=$(select_templates "$requirements")
  
  # Step 3: Load configuration hierarchy
  local config
  config=$(load_configurations "$org" "$team" "$environment" "$project")
  
  # Step 4: Scaffold project
  scaffold_project "$output_dir" "$templates" "$config" "$dry_run"
  
  if [ "$dry_run" = "true" ]; then
    ok "Dry run completed successfully"
    exit 0
  fi
  
  # Step 5: Validate compliance
  validate_compliance "$output_dir" "$config"
  
  # Success message
  rocket "Project '$project' successfully initialized!"
  echo -e "\nüìÅ Project location: $output_dir"
  echo -e "üìö Next steps:"
  echo -e "   1. cd $output_dir"
  echo -e "   2. Review generated configuration"
  echo -e "   3. Initialize git repository"
  echo -e "   4. Run terraform plan/apply"
  
  # Generate setup instructions
  if [ -f "$output_dir/README.md" ]; then
    echo -e "\nüìñ See README.md for detailed setup instructions"
  fi
}

# Template management command
cmd_templates() {
  local action="${1:-list}"
  shift || true
  
  case "$action" in
    list)
      log "Available templates:"
      find "$TEMPLATES_DIR/registry" -name "*.yml" -exec basename {} .yml \; | sort
      ;;
    info)
      local template="$1"
      [ -z "$template" ] && fail "Template name required"
      cat "$TEMPLATES_DIR/registry/${template}.yml" 2>/dev/null || fail "Template not found: $template"
      ;;
    update)
      log "Updating template registry"
      "$TEMPLATES_DIR/scripts/update-registry.sh"
      ;;
    *)
      fail "Unknown templates action: $action"
      ;;
  esac
}

# Configuration management command  
cmd_config() {
  local action="${1:-show}"
  shift || true
  
  case "$action" in
    show)
      local org="${1:-$DEFAULT_ORG}"
      local team="${2:-}"
      local env="${3:-}"
      
      if [ -n "$team" ] && [ -n "$env" ]; then
        load_configurations "$org" "$team" "$env" "preview"
      else
        fail "Usage: config show ORG TEAM ENVIRONMENT"
      fi
      ;;
    validate)
      log "Validating configuration hierarchy"
      python3 "$CONFIG_DIR/schemas/config_validator.py" --config-dir "$CONFIG_DIR/hierarchy"
      ;;
    *)
      fail "Unknown config action: $action"
      ;;
  esac
}

# Main command router
main() {
  # Ensure Python dependencies
  command -v python3 >/dev/null || fail "Python 3 is required"
  
  case "${1:-}" in
    init) shift; cmd_init "$@" ;;
    templates) shift; cmd_templates "$@" ;;
    config) shift; cmd_config "$@" ;;
    validate) shift; validate_compliance "." "{}" ;;
    -h|--help|help) usage; exit 0 ;;
    "") usage; exit 1 ;;
    *) fail "Unknown command: $1. Use --help for usage." ;;
  esac
}

main "$@"