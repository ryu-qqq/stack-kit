# Shared Infrastructure CI/CD Pipeline
name: 'Shared Infrastructure CD'

on:
  push:
    branches: [main]
    paths:
      - 'shared-infra/**'
  pull_request:
    branches: [main]
    paths:
      - 'shared-infra/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod
      force_apply:
        description: 'Force apply without confirmation'
        required: false
        default: false
        type: boolean

env:
  TF_VERSION: '1.6.0'
  AWS_REGION: 'ap-northeast-2'
  ATLANTIS_URL: ${{ secrets.ATLANTIS_URL }}

jobs:
  detect-changes:
    name: 'Detect Infrastructure Changes'
    runs-on: ubuntu-latest
    outputs:
      changed-envs: ${{ steps.changes.outputs.environments }}
      has-changes: ${{ steps.changes.outputs.has-changes }}
      impact-analysis: ${{ steps.impact.outputs.analysis }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
      
      - name: Detect Changed Environments
        id: changes
        run: |
          # Detect which environments have changes
          changed_files=$(git diff --name-only HEAD~1 HEAD)
          environments=()
          
          for file in $changed_files; do
            if [[ $file == shared-infra/environments/* ]]; then
              env_name=$(echo $file | cut -d'/' -f3)
              if [[ ! " ${environments[@]} " =~ " ${env_name} " ]]; then
                environments+=("$env_name")
              fi
            fi
          done
          
          has_changes="false"
          if [[ ${#environments[@]} -gt 0 ]]; then
            has_changes="true"
          fi
          
          echo "environments=$(printf '%s,' "${environments[@]}" | sed 's/,$//')" >> $GITHUB_OUTPUT
          echo "has-changes=$has_changes" >> $GITHUB_OUTPUT
          
      - name: Infrastructure Impact Analysis
        id: impact
        if: steps.changes.outputs.has-changes == 'true'
        run: |
          # Analyze which downstream projects might be affected
          python3 scripts/analyze-infrastructure-dependencies.py \
            --changed-envs "${{ steps.changes.outputs.environments }}" \
            --output-format json > impact-analysis.json
          
          echo "analysis<<EOF" >> $GITHUB_OUTPUT
          cat impact-analysis.json >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

  terraform-plan:
    name: 'Terraform Plan'
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.has-changes == 'true'
    
    strategy:
      matrix:
        environment: ${{ fromJSON(format('["{0}"]', needs.detect-changes.outputs.changed-envs)) }}
      fail-fast: false
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
      
      - name: Terraform Init
        working-directory: ./shared-infra/environments/${{ matrix.environment }}
        run: |
          terraform init \
            -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
            -backend-config="key=shared-infra/${{ matrix.environment }}/terraform.tfstate" \
            -backend-config="region=${{ env.AWS_REGION }}" \
            -backend-config="dynamodb_table=${{ secrets.TF_STATE_LOCK_TABLE }}"
      
      - name: Terraform Validate
        working-directory: ./shared-infra/environments/${{ matrix.environment }}
        run: terraform validate
      
      - name: Terraform Plan
        working-directory: ./shared-infra/environments/${{ matrix.environment }}
        run: |
          terraform plan \
            -detailed-exitcode \
            -out=tfplan-${{ matrix.environment }} \
            -var-file="../common.tfvars" \
            -var-file="terraform.tfvars"
      
      - name: Upload Plan Artifact
        uses: actions/upload-artifact@v3
        with:
          name: tfplan-shared-infra-${{ matrix.environment }}
          path: ./shared-infra/environments/${{ matrix.environment }}/tfplan-${{ matrix.environment }}
          retention-days: 30
      
      - name: Generate Plan Summary
        working-directory: ./shared-infra/environments/${{ matrix.environment }}
        run: |
          terraform show -no-color tfplan-${{ matrix.environment }} > plan-summary.txt
          
          # Create GitHub comment with plan summary
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            python3 ../../../scripts/create-plan-comment.py \
              --environment "${{ matrix.environment }}" \
              --plan-file "plan-summary.txt" \
              --impact-analysis '${{ needs.detect-changes.outputs.impact-analysis }}'
          fi

  notify-downstream-projects:
    name: 'Notify Downstream Projects'
    runs-on: ubuntu-latest
    needs: [detect-changes, terraform-plan]
    if: needs.detect-changes.outputs.has-changes == 'true'
    
    steps:
      - name: Parse Impact Analysis
        id: parse-impact
        run: |
          echo '${{ needs.detect-changes.outputs.impact-analysis }}' | \
          jq -r '.affected_projects[]' > affected_projects.txt
      
      - name: Trigger Dependency Updates
        env:
          GH_TOKEN: ${{ secrets.GH_PAT_TOKEN }}
        run: |
          while IFS= read -r project; do
            echo "Triggering dependency update for project: $project"
            
            # Create workflow dispatch event in downstream project
            gh workflow run dependency-update.yml \
              --repo "$project" \
              --field shared_infra_ref="${{ github.sha }}" \
              --field changed_environments="${{ needs.detect-changes.outputs.changed-envs }}"
              
          done < affected_projects.txt
      
      - name: Send Slack Notification
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              "text": "🏗️ Shared Infrastructure Changes Detected",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Shared Infrastructure Changes*\n📋 Environments: `${{ needs.detect-changes.outputs.changed-envs }}`\n🔗 <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Workflow>"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Affected Projects:*\n${{ steps.parse-impact.outputs.affected_projects }}"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  terraform-apply:
    name: 'Terraform Apply'
    runs-on: ubuntu-latest
    needs: [detect-changes, terraform-plan]
    if: |
      needs.detect-changes.outputs.has-changes == 'true' && 
      (github.ref == 'refs/heads/main' || github.event.inputs.force_apply == 'true')
    
    environment:
      name: shared-infra-${{ matrix.environment }}
      url: ${{ env.ATLANTIS_URL }}
    
    strategy:
      matrix:
        environment: ${{ fromJSON(format('["{0}"]', needs.detect-changes.outputs.changed-envs)) }}
      max-parallel: 1  # Sequential deployment to avoid conflicts
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
      
      - name: Download Plan Artifact
        uses: actions/download-artifact@v3
        with:
          name: tfplan-shared-infra-${{ matrix.environment }}
          path: ./shared-infra/environments/${{ matrix.environment }}
      
      - name: Terraform Init
        working-directory: ./shared-infra/environments/${{ matrix.environment }}
        run: |
          terraform init \
            -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
            -backend-config="key=shared-infra/${{ matrix.environment }}/terraform.tfstate" \
            -backend-config="region=${{ env.AWS_REGION }}" \
            -backend-config="dynamodb_table=${{ secrets.TF_STATE_LOCK_TABLE }}"
      
      - name: Terraform Apply
        working-directory: ./shared-infra/environments/${{ matrix.environment }}
        run: |
          terraform apply \
            -auto-approve \
            tfplan-${{ matrix.environment }}
      
      - name: Export Infrastructure Outputs
        working-directory: ./shared-infra/environments/${{ matrix.environment }}
        run: |
          # Export outputs for downstream projects to consume
          terraform output -json > infrastructure-outputs.json
          
          # Upload to S3 for downstream projects
          aws s3 cp infrastructure-outputs.json \
            s3://${{ secrets.TF_OUTPUTS_BUCKET }}/shared-infra/${{ matrix.environment }}/outputs.json
      
      - name: Update Infrastructure Registry
        run: |
          # Update infrastructure registry with new resource information
          python3 scripts/update-infrastructure-registry.py \
            --environment "${{ matrix.environment }}" \
            --outputs-file "./shared-infra/environments/${{ matrix.environment }}/infrastructure-outputs.json" \
            --registry-bucket "${{ secrets.INFRA_REGISTRY_BUCKET }}"

  post-deploy-validation:
    name: 'Post-Deploy Validation'
    runs-on: ubuntu-latest
    needs: [terraform-apply]
    if: always() && needs.terraform-apply.result == 'success'
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Infrastructure Health Check
        run: |
          # Run health checks on deployed infrastructure
          python3 scripts/infrastructure-health-check.py \
            --environments "${{ needs.detect-changes.outputs.changed-envs }}" \
            --timeout 300
      
      - name: Trigger Downstream Tests
        env:
          GH_TOKEN: ${{ secrets.GH_PAT_TOKEN }}
        run: |
          # Trigger integration tests in downstream projects
          echo '${{ needs.detect-changes.outputs.impact-analysis }}' | \
          jq -r '.affected_projects[]' | while IFS= read -r project; do
            echo "Triggering integration tests for: $project"
            
            gh workflow run integration-test.yml \
              --repo "$project" \
              --field trigger_source="shared-infra" \
              --field shared_infra_ref="${{ github.sha }}"
          done
      
      - name: Final Notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: |
            🚀 Shared Infrastructure Deployment Complete
            📋 Environments: ${{ needs.detect-changes.outputs.changed-envs }}
            ✅ Status: ${{ job.status }}
            🔗 Workflow: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: always()