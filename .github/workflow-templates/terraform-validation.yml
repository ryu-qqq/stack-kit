# StackKit Terraform Validation Workflow
# 모든 Terraform 코드에 대한 종합적인 검증을 수행합니다.

name: 🔍 Terraform Validation

on:
  pull_request:
    paths:
      - 'terraform/**/*.tf'
      - 'terraform/**/*.tfvars'
      - '.github/workflows/terraform-validation.yml'
  push:
    branches:
      - main
      - develop
    paths:
      - 'terraform/**/*.tf'
      - 'terraform/**/*.tfvars'

env:
  TF_VERSION: "1.8.5"
  AWS_REGION: "ap-northeast-2"
  # Infracost API 키 설정 (Repository Secrets에서 설정)
  INFRACOST_API_KEY: ${{ secrets.INFRACOST_API_KEY }}

permissions:
  contents: read
  pull-requests: write
  id-token: write  # AWS OIDC를 위한 권한

jobs:
  detect-changes:
    name: 🔍 변경된 Terraform 스택 감지
    runs-on: ubuntu-latest
    outputs:
      stacks: ${{ steps.changes.outputs.stacks }}
      has_changes: ${{ steps.changes.outputs.has_changes }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 변경된 Terraform 스택 감지
        id: changes
        run: |
          # 변경된 파일들에서 Terraform 스택 디렉토리 추출
          changed_files=$(git diff --name-only origin/${{ github.base_ref }}..HEAD || echo "")
          
          # Terraform 파일이 변경된 스택들 찾기
          stacks=()
          for file in $changed_files; do
            if [[ $file =~ ^terraform/stacks/([^/]+)/([^/]+)/ ]]; then
              stack_path="terraform/stacks/${BASH_REMATCH[1]}/${BASH_REMATCH[2]}"
              if [[ ! " ${stacks[@]} " =~ " ${stack_path} " ]]; then
                stacks+=("$stack_path")
              fi
            fi
          done
          
          if [ ${#stacks[@]} -gt 0 ]; then
            echo "has_changes=true" >> $GITHUB_OUTPUT
            # JSON 배열로 변환
            stacks_json=$(printf '%s\n' "${stacks[@]}" | jq -R . | jq -s .)
            echo "stacks=$stacks_json" >> $GITHUB_OUTPUT
            echo "✅ 감지된 Terraform 스택들:"
            printf '%s\n' "${stacks[@]}"
          else
            echo "has_changes=false" >> $GITHUB_OUTPUT
            echo "stacks=[]" >> $GITHUB_OUTPUT
            echo "ℹ️ 변경된 Terraform 스택이 없습니다."
          fi

  terraform-validation:
    name: 🧪 Terraform 검증
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.has_changes == 'true'
    strategy:
      matrix:
        stack: ${{ fromJson(needs.detect-changes.outputs.stacks) }}
      fail-fast: false
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: AWS 자격증명 설정
        uses: aws-actions/configure-aws-credentials@v4
        with:
          # Option 1: IAM Role (권장)
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          # Option 2: IAM User (대안)
          # aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          # aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Infracost
        if: env.INFRACOST_API_KEY != ''
        uses: infracost/actions/setup@v2
        with:
          api-key: ${{ env.INFRACOST_API_KEY }}

      - name: 스택 정보 표시
        run: |
          echo "🏗️ 검증 중인 스택: ${{ matrix.stack }}"
          echo "📍 경로: $(pwd)/${{ matrix.stack }}"
          ls -la "${{ matrix.stack }}" || echo "⚠️ 스택 디렉토리를 찾을 수 없습니다"

      - name: Terraform Format Check
        id: fmt
        working-directory: ${{ matrix.stack }}
        run: |
          echo "::group::🎨 Terraform Format 검사"
          terraform fmt -check -recursive -diff
          echo "::endgroup::"
        continue-on-error: true

      - name: Terraform Init
        id: init
        working-directory: ${{ matrix.stack }}
        run: |
          echo "::group::⚡ Terraform 초기화"
          # S3 백엔드 설정이 있는 경우 초기화
          if [ -f "backend.hcl" ]; then
            terraform init -backend-config=backend.hcl
          else
            terraform init
          fi
          echo "::endgroup::"

      - name: Terraform Validate
        id: validate
        working-directory: ${{ matrix.stack }}
        run: |
          echo "::group::✅ Terraform 구문 검증"
          terraform validate
          echo "::endgroup::"

      - name: Terraform Plan
        id: plan
        working-directory: ${{ matrix.stack }}
        run: |
          echo "::group::📋 Terraform Plan 생성"
          # tfvars 파일 찾기
          if [ -f "terraform.tfvars" ]; then
            TFVARS_ARG="-var-file=terraform.tfvars"
          elif [ -f "dev.tfvars" ]; then
            TFVARS_ARG="-var-file=dev.tfvars"
          else
            TFVARS_ARG=""
          fi
          
          terraform plan $TFVARS_ARG -out=tfplan -detailed-exitcode
          PLAN_EXIT_CODE=$?
          
          # Plan 결과를 텍스트와 JSON으로 저장
          terraform show -no-color tfplan > plan_output.txt
          terraform show -json tfplan > plan_output.json
          
          echo "plan_exit_code=$PLAN_EXIT_CODE" >> $GITHUB_OUTPUT
          echo "::endgroup::"
        continue-on-error: true

      - name: StackKit 보안 검증
        id: security
        working-directory: ${{ matrix.stack }}
        run: |
          echo "::group::🛡️ StackKit 보안 검증"
          
          # StackKit 검증 스크립트 경로 찾기
          VALIDATION_SCRIPT="$(pwd)/../../scripts/validate.sh"
          if [ ! -f "$VALIDATION_SCRIPT" ]; then
            VALIDATION_SCRIPT="../../../scripts/validate.sh"
          fi
          
          if [ -f "$VALIDATION_SCRIPT" ]; then
            # 스택 이름 추출 (terraform/stacks/project/env -> project env)
            STACK_PATH="${{ matrix.stack }}"
            PROJECT_NAME=$(echo "$STACK_PATH" | cut -d'/' -f3)
            ENVIRONMENT=$(echo "$STACK_PATH" | cut -d'/' -f4)
            
            echo "📊 보안 검증 실행: $PROJECT_NAME $ENVIRONMENT"
            bash "$VALIDATION_SCRIPT" "$PROJECT_NAME" "$ENVIRONMENT" --security-only || true
          else
            echo "⚠️ StackKit 검증 스크립트를 찾을 수 없습니다"
          fi
          echo "::endgroup::"

      - name: 비용 추정 (Infracost)
        id: cost
        if: env.INFRACOST_API_KEY != ''
        working-directory: ${{ matrix.stack }}
        run: |
          echo "::group::💰 인프라 비용 추정"
          
          if [ -f "tfplan" ]; then
            # Infracost 비용 추정
            infracost breakdown \
              --path . \
              --terraform-plan-path tfplan \
              --format json \
              --out-file infracost.json
            
            # 사람이 읽기 쉬운 형태로도 생성
            infracost breakdown \
              --path . \
              --terraform-plan-path tfplan \
              --format table > infracost_output.txt
            
            # 월간 비용 추출
            MONTHLY_COST=$(jq -r '.totalMonthlyCost // "0"' infracost.json)
            echo "monthly_cost=$MONTHLY_COST" >> $GITHUB_OUTPUT
            
            echo "💰 예상 월간 비용: \$$MONTHLY_COST USD"
          else
            echo "⚠️ Terraform Plan 파일을 찾을 수 없어 비용 추정을 건너뜁니다"
          fi
          echo "::endgroup::"

      - name: PR 코멘트 생성
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            const stackPath = '${{ matrix.stack }}';
            const stackName = stackPath.replace('terraform/stacks/', '');
            
            // 결과 수집
            const fmt = '${{ steps.fmt.outcome }}';
            const validate = '${{ steps.validate.outcome }}';
            const planExitCode = '${{ steps.plan.outputs.plan_exit_code }}';
            const monthlyCost = '${{ steps.cost.outputs.monthly_cost }}';
            
            let comment = `## 🔍 Terraform 검증 결과 - \`${stackName}\`\n\n`;
            
            // 검증 결과 테이블
            comment += `| 검사 항목 | 결과 |\n`;
            comment += `|----------|------|\n`;
            comment += `| 🎨 Format | ${fmt === 'success' ? '✅ 통과' : '❌ 실패'} |\n`;
            comment += `| ✅ Validate | ${validate === 'success' ? '✅ 통과' : '❌ 실패'} |\n`;
            comment += `| 📋 Plan | ${planExitCode === '0' ? '✅ 변경사항 없음' : planExitCode === '2' ? '📝 변경사항 있음' : '❌ 실패'} |\n`;
            
            if (monthlyCost && monthlyCost !== '0') {
              comment += `| 💰 예상 비용 | $${monthlyCost} USD/월 |\n`;
            }
            
            comment += '\n';
            
            // Plan 결과가 있으면 요약 추가
            const planOutputPath = path.join('${{ matrix.stack }}', 'plan_output.txt');
            if (fs.existsSync(planOutputPath)) {
              const planOutput = fs.readFileSync(planOutputPath, 'utf8');
              const truncatedPlan = planOutput.length > 8000 ? 
                planOutput.substring(0, 8000) + '\n\n... (결과가 잘렸습니다. 전체 결과는 Actions 로그를 확인하세요)' : 
                planOutput;
              
              comment += `<details>\n<summary>📋 Terraform Plan 상세 결과</summary>\n\n\`\`\`terraform\n${truncatedPlan}\n\`\`\`\n</details>\n\n`;
            }
            
            // Infracost 결과가 있으면 추가
            const costOutputPath = path.join('${{ matrix.stack }}', 'infracost_output.txt');
            if (fs.existsSync(costOutputPath)) {
              const costOutput = fs.readFileSync(costOutputPath, 'utf8');
              comment += `<details>\n<summary>💰 비용 상세 분석</summary>\n\n\`\`\`\n${costOutput}\n\`\`\`\n</details>\n\n`;
            }
            
            comment += `---\n*🤖 StackKit 자동 검증 by GitHub Actions*`;
            
            // 기존 코멘트 찾기 및 업데이트
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes(`Terraform 검증 결과 - \`${stackName}\``)
            );
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: comment
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            }

  summary:
    name: 📊 검증 결과 요약
    runs-on: ubuntu-latest
    needs: [detect-changes, terraform-validation]
    if: always() && needs.detect-changes.outputs.has_changes == 'true'
    
    steps:
      - name: 검증 결과 요약
        run: |
          echo "## 🔍 Terraform 검증 완료"
          echo ""
          echo "검증된 스택 수: $(echo '${{ needs.detect-changes.outputs.stacks }}' | jq length)"
          echo ""
          
          if [[ "${{ needs.terraform-validation.result }}" == "success" ]]; then
            echo "✅ 모든 검증이 성공했습니다!"
            exit 0
          else
            echo "❌ 일부 검증이 실패했습니다. 상세 내용을 확인해주세요."
            exit 1
          fi