# StackKit PR Plan & Cost Estimation Workflow
# PR에서 Terraform Plan과 비용 추정을 수행하고 결과를 코멘트로 표시합니다.

name: 📋 Terraform PR Plan & Cost

on:
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - 'terraform/**/*.tf'
      - 'terraform/**/*.tfvars'
      - 'terraform/**/*.hcl'

env:
  TF_VERSION: "1.8.5"
  AWS_REGION: "ap-northeast-2"
  INFRACOST_API_KEY: ${{ secrets.INFRACOST_API_KEY }}

permissions:
  contents: read
  pull-requests: write
  id-token: write

jobs:
  plan-and-cost:
    name: 📋 Plan & 💰 Cost Estimation
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout PR
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Setup Infracost
        if: env.INFRACOST_API_KEY != ''
        uses: infracost/actions/setup@v2
        with:
          api-key: ${{ env.INFRACOST_API_KEY }}

      - name: AWS 자격증명 설정
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: 변경된 Terraform 스택 감지
        id: detect
        run: |
          # PR에서 변경된 파일들 분석
          echo "🔍 변경된 파일 분석 중..."
          
          changed_files=$(git diff --name-only origin/${{ github.base_ref }}..HEAD)
          
          # 변경된 Terraform 스택 디렉토리들 추출
          declare -A stacks
          for file in $changed_files; do
            if [[ $file =~ ^terraform/stacks/([^/]+/[^/]+)/ ]]; then
              stack_dir="terraform/stacks/${BASH_REMATCH[1]}"
              stacks["$stack_dir"]=1
              echo "📍 감지된 스택: $stack_dir"
            fi
          done
          
          if [ ${#stacks[@]} -eq 0 ]; then
            echo "has_changes=false" >> $GITHUB_OUTPUT
            echo "ℹ️ Terraform 스택 변경사항이 없습니다."
            exit 0
          fi
          
          echo "has_changes=true" >> $GITHUB_OUTPUT
          
          # 스택 목록을 배열로 저장
          stack_list=""
          for stack in "${!stacks[@]}"; do
            if [ -z "$stack_list" ]; then
              stack_list="$stack"
            else
              stack_list="$stack_list $stack"
            fi
          done
          echo "stacks=$stack_list" >> $GITHUB_OUTPUT

      - name: Terraform Plan 및 비용 추정
        if: steps.detect.outputs.has_changes == 'true'
        id: plan
        run: |
          echo "🏗️ Terraform Plan 및 비용 추정 시작"
          
          # 결과 저장을 위한 임시 디렉토리 생성
          mkdir -p /tmp/plan_results
          
          OVERALL_SUCCESS=true
          STACKS="${{ steps.detect.outputs.stacks }}"
          
          for stack in $STACKS; do
            echo ""
            echo "===================================================="
            echo "🏗️ 처리 중인 스택: $stack"
            echo "===================================================="
            
            if [ ! -d "$stack" ]; then
              echo "⚠️ 스택 디렉토리를 찾을 수 없습니다: $stack"
              continue
            fi
            
            cd "$stack"
            stack_name=$(basename "$stack")
            result_file="/tmp/plan_results/${stack_name}.json"
            
            # 스택 결과 초기화
            echo '{"stack":"'$stack'","success":false,"has_changes":false}' > "$result_file"
            
            echo "📁 작업 디렉토리: $(pwd)"
            
            # Terraform 초기화
            echo "⚡ Terraform 초기화..."
            if [ -f "backend.hcl" ]; then
              terraform init -backend-config=backend.hcl -input=false
            else
              terraform init -input=false
            fi
            
            if [ $? -ne 0 ]; then
              echo "❌ Terraform 초기화 실패"
              OVERALL_SUCCESS=false
              cd - > /dev/null
              continue
            fi
            
            # Terraform Plan 실행
            echo "📋 Terraform Plan 실행..."
            
            # tfvars 파일 찾기
            TFVARS_ARG=""
            if [ -f "terraform.tfvars" ]; then
              TFVARS_ARG="-var-file=terraform.tfvars"
              echo "📄 사용할 변수 파일: terraform.tfvars"
            elif [ -f "dev.tfvars" ]; then
              TFVARS_ARG="-var-file=dev.tfvars"
              echo "📄 사용할 변수 파일: dev.tfvars"
            elif [ -f "prod.tfvars" ]; then
              TFVARS_ARG="-var-file=prod.tfvars"
              echo "📄 사용할 변수 파일: prod.tfvars"
            fi
            
            terraform plan $TFVARS_ARG -out=tfplan -detailed-exitcode -input=false
            PLAN_EXIT_CODE=$?
            
            if [ $PLAN_EXIT_CODE -eq 1 ]; then
              echo "❌ Terraform Plan 실행 실패"
              OVERALL_SUCCESS=false
              cd - > /dev/null
              continue
            fi
            
            # Plan 결과를 텍스트와 JSON으로 저장
            terraform show -no-color tfplan > plan.txt
            terraform show -json tfplan > plan.json
            
            # Plan 변경사항 여부 확인
            HAS_CHANGES="false"
            if [ $PLAN_EXIT_CODE -eq 2 ]; then
              HAS_CHANGES="true"
              echo "📝 인프라 변경사항이 감지되었습니다"
            else
              echo "✅ 인프라 변경사항이 없습니다"
            fi
            
            # 비용 추정 (Infracost)
            MONTHLY_COST="0"
            if [ "${{ env.INFRACOST_API_KEY }}" != "" ] && [ -f "tfplan" ]; then
              echo "💰 Infracost 비용 추정 실행..."
              
              infracost breakdown \
                --path . \
                --terraform-plan-path tfplan \
                --format json \
                --out-file infracost.json 2>/dev/null || echo '{"totalMonthlyCost":"0"}' > infracost.json
              
              # 사람이 읽기 쉬운 형태로도 생성
              infracost breakdown \
                --path . \
                --terraform-plan-path tfplan \
                --format table > infracost.txt 2>/dev/null || echo "비용 정보를 가져올 수 없습니다." > infracost.txt
              
              MONTHLY_COST=$(jq -r '.totalMonthlyCost // "0"' infracost.json)
              echo "💰 예상 월간 비용: \$${MONTHLY_COST} USD"
            else
              echo "ℹ️ Infracost 비용 추정을 건너뜁니다 (API 키 없음 또는 Plan 파일 없음)"
            fi
            
            # 결과 JSON 업데이트
            jq --arg cost "$MONTHLY_COST" --argjson has_changes "$HAS_CHANGES" \
               '.success=true | .monthly_cost=$cost | .has_changes=$has_changes' \
               "$result_file" > "${result_file}.tmp" && mv "${result_file}.tmp" "$result_file"
            
            echo "✅ 스택 처리 완료: $stack"
            cd - > /dev/null
          done
          
          # 전체 결과 수집
          echo ""
          echo "📊 전체 결과 수집 중..."
          
          TOTAL_COST=0
          CHANGED_STACKS=0
          TOTAL_STACKS=0
          
          for result_file in /tmp/plan_results/*.json; do
            if [ -f "$result_file" ]; then
              TOTAL_STACKS=$((TOTAL_STACKS + 1))
              
              if [ "$(jq -r '.has_changes' "$result_file")" = "true" ]; then
                CHANGED_STACKS=$((CHANGED_STACKS + 1))
              fi
              
              cost=$(jq -r '.monthly_cost // "0"' "$result_file")
              if [ "$cost" != "0" ] && [ "$cost" != "null" ]; then
                TOTAL_COST=$(echo "$TOTAL_COST + $cost" | bc -l)
              fi
            fi
          done
          
          echo "overall_success=$OVERALL_SUCCESS" >> $GITHUB_OUTPUT
          echo "total_cost=$TOTAL_COST" >> $GITHUB_OUTPUT
          echo "changed_stacks=$CHANGED_STACKS" >> $GITHUB_OUTPUT
          echo "total_stacks=$TOTAL_STACKS" >> $GITHUB_OUTPUT
          
          echo ""
          echo "📊 최종 요약:"
          echo "- 전체 스택: $TOTAL_STACKS"
          echo "- 변경된 스택: $CHANGED_STACKS"
          echo "- 총 예상 비용: \$${TOTAL_COST} USD/월"

      - name: PR 코멘트 생성/업데이트
        if: steps.detect.outputs.has_changes == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            // 결과 파일들 읽기
            const resultsDir = '/tmp/plan_results';
            let allResults = [];
            
            if (fs.existsSync(resultsDir)) {
              const files = fs.readdirSync(resultsDir).filter(f => f.endsWith('.json'));
              
              for (const file of files) {
                try {
                  const content = fs.readFileSync(path.join(resultsDir, file), 'utf8');
                  const result = JSON.parse(content);
                  allResults.push(result);
                } catch (error) {
                  console.error(`결과 파일 읽기 실패: ${file}`, error);
                }
              }
            }
            
            const totalCost = '${{ steps.plan.outputs.total_cost }}';
            const changedStacks = '${{ steps.plan.outputs.changed_stacks }}';
            const totalStacks = '${{ steps.plan.outputs.total_stacks }}';
            const overallSuccess = '${{ steps.plan.outputs.overall_success }}';
            
            // 코멘트 내용 생성
            let comment = `## 📋 Terraform Plan & 💰 Cost Estimation\n\n`;
            
            // 전체 요약
            comment += `### 📊 요약\n`;
            comment += `| 항목 | 값 |\n`;
            comment += `|------|----|\n`;
            comment += `| 🏗️ 전체 스택 | ${totalStacks}개 |\n`;
            comment += `| 📝 변경된 스택 | ${changedStacks}개 |\n`;
            comment += `| 💰 총 예상 비용 | $${totalCost} USD/월 |\n`;
            comment += `| ✅ 전체 상태 | ${overallSuccess === 'true' ? '성공' : '실패'} |\n\n`;
            
            // 스택별 상세 결과
            if (allResults.length > 0) {
              comment += `### 🏗️ 스택별 상세 결과\n\n`;
              
              for (const result of allResults) {
                const stackName = path.basename(result.stack);
                const status = result.success ? '✅' : '❌';
                const changes = result.has_changes ? '📝 변경됨' : '➖ 변경없음';
                const cost = result.monthly_cost && result.monthly_cost !== '0' ? 
                  `$${result.monthly_cost} USD/월` : '무료';
                
                comment += `#### ${status} \`${stackName}\`\n`;
                comment += `- **상태**: ${result.success ? '성공' : '실패'}\n`;
                comment += `- **변경사항**: ${changes}\n`;
                comment += `- **예상 비용**: ${cost}\n`;
                
                // Plan 결과 파일이 있으면 상세 정보 추가
                const stackDir = result.stack;
                const planFile = path.join(stackDir, 'plan.txt');
                const costFile = path.join(stackDir, 'infracost.txt');
                
                if (fs.existsSync(planFile)) {
                  const planContent = fs.readFileSync(planFile, 'utf8');
                  const truncatedPlan = planContent.length > 3000 ? 
                    planContent.substring(0, 3000) + '\n\n... (결과가 잘렸습니다)' : 
                    planContent;
                  
                  comment += `\n<details>\n<summary>📋 Terraform Plan 상세</summary>\n\n\`\`\`hcl\n${truncatedPlan}\n\`\`\`\n</details>\n`;
                }
                
                if (fs.existsSync(costFile) && result.monthly_cost && result.monthly_cost !== '0') {
                  const costContent = fs.readFileSync(costFile, 'utf8');
                  comment += `\n<details>\n<summary>💰 비용 상세 분석</summary>\n\n\`\`\`\n${costContent}\n\`\`\`\n</details>\n`;
                }
                
                comment += `\n`;
              }
            }
            
            comment += `---\n`;
            comment += `*🤖 자동 생성된 StackKit Plan 결과 | 실행 시간: ${new Date().toLocaleString('ko-KR')}*\n`;
            comment += `*💡 이 결과는 예상 값이며, 실제 비용과 다를 수 있습니다.*`;
            
            // 기존 코멘트 찾기
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const existingComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('Terraform Plan & 💰 Cost Estimation')
            );
            
            if (existingComment) {
              // 기존 코멘트 업데이트
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: comment
              });
              console.log('기존 PR 코멘트를 업데이트했습니다.');
            } else {
              // 새 코멘트 생성
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
              console.log('새로운 PR 코멘트를 생성했습니다.');
            }

      - name: 검증 결과에 따른 종료
        if: steps.detect.outputs.has_changes == 'true'
        run: |
          if [[ "${{ steps.plan.outputs.overall_success }}" == "true" ]]; then
            echo "✅ 모든 Terraform Plan이 성공했습니다!"
            echo "📊 변경된 스택: ${{ steps.plan.outputs.changed_stacks }}/${{ steps.plan.outputs.total_stacks }}"
            echo "💰 총 예상 비용: \$${{ steps.plan.outputs.total_cost }} USD/월"
            exit 0
          else
            echo "❌ 일부 Terraform Plan이 실패했습니다."
            echo "상세 내용은 위의 로그를 확인해주세요."
            exit 1
          fi

      - name: 변경사항 없음 알림
        if: steps.detect.outputs.has_changes == 'false'
        run: |
          echo "ℹ️ Terraform 관련 변경사항이 없습니다."
          echo "검증을 건너뜁니다."