# StackKit Atlantis Integration Workflow  
# 중앙 Atlantis와 연동하여 추가적인 검증을 수행합니다.

name: 🤖 Atlantis Integration

on:
  pull_request:
    types: [opened, synchronize]
    paths:
      - 'terraform/**/*.tf'
      - 'terraform/**/*.tfvars'
      - 'atlantis.yaml'
  
  issue_comment:
    types: [created]

env:
  ATLANTIS_URL: ${{ secrets.ATLANTIS_URL }}
  AWS_REGION: "ap-northeast-2"

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  atlantis-notification:
    name: 🔔 Atlantis 알림
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Atlantis 상태 확인
        id: atlantis-check
        run: |
          if [ -n "${{ env.ATLANTIS_URL }}" ]; then
            # Atlantis 서버 상태 확인
            if curl -s --max-time 10 "${{ env.ATLANTIS_URL }}/healthz" > /dev/null; then
              echo "atlantis_available=true" >> $GITHUB_OUTPUT
              echo "✅ Atlantis 서버가 활성화되어 있습니다"
            else
              echo "atlantis_available=false" >> $GITHUB_OUTPUT
              echo "⚠️ Atlantis 서버에 연결할 수 없습니다"
            fi
          else
            echo "atlantis_available=false" >> $GITHUB_OUTPUT
            echo "ℹ️ Atlantis URL이 설정되지 않았습니다"
          fi

      - name: 변경된 Terraform 파일 분석
        id: changes
        run: |
          echo "🔍 변경된 Terraform 파일 분석 중..."
          
          changed_files=$(git diff --name-only origin/${{ github.base_ref }}..HEAD)
          tf_changes=$(echo "$changed_files" | grep -E '\.(tf|tfvars)$' | wc -l)
          
          echo "terraform_changes=$tf_changes" >> $GITHUB_OUTPUT
          
          if [ $tf_changes -gt 0 ]; then
            echo "📝 변경된 Terraform 파일: $tf_changes 개"
            echo "$changed_files" | grep -E '\.(tf|tfvars)$' | head -10
            
            if [ $tf_changes -gt 10 ]; then
              echo "... (더 많은 파일들이 변경됨)"
            fi
          else
            echo "ℹ️ Terraform 파일 변경사항 없음"
          fi

      - name: PR에 Atlantis 안내 코멘트 추가
        if: steps.atlantis-check.outputs.atlantis_available == 'true' && steps.changes.outputs.terraform_changes > 0
        uses: actions/github-script@v7
        with:
          script: |
            const tfChanges = ${{ steps.changes.outputs.terraform_changes }};
            const atlantisUrl = '${{ env.ATLANTIS_URL }}';
            
            const comment = `## 🤖 Atlantis 자동 검증 안내
            
            이 PR에는 **${tfChanges}개**의 Terraform 파일 변경사항이 감지되었습니다.
            
            ### 🚀 다음 단계
            
            1. **자동 Plan**: Atlantis가 곧 자동으로 \`terraform plan\`을 실행합니다
            2. **AI 리뷰**: AI 리뷰어가 Plan 결과를 분석하고 Slack에 알림을 보냅니다
            3. **검토 후 적용**: 리뷰 완료 후 \`atlantis apply\`로 인프라를 배포할 수 있습니다
            
            ### 💬 Atlantis 명령어
            
            이 PR에서 사용할 수 있는 명령어:
            - \`atlantis plan\` - 수동으로 Plan 실행
            - \`atlantis apply\` - Plan 승인 후 Apply 실행  
            - \`atlantis unlock\` - 잠금 해제 (필요시)
            - \`atlantis help\` - 도움말 보기
            
            ### 🔗 유용한 링크
            
            - [Atlantis 서버](${atlantisUrl})
            - [StackKit 문서](https://github.com/yourorg/stackkit#readme)
            
            ---
            *🤖 StackKit 자동 알림 | Atlantis 서버: ${atlantisUrl}*`;
            
            // 기존 Atlantis 코멘트가 있는지 확인
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const existingComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('🤖 Atlantis 자동 검증 안내')
            );
            
            if (!existingComment) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
              console.log('Atlantis 안내 코멘트를 추가했습니다.');
            }

  command-monitor:
    name: 🎯 Atlantis 명령어 모니터링
    runs-on: ubuntu-latest
    if: github.event_name == 'issue_comment' && contains(github.event.comment.body, 'atlantis')
    
    steps:
      - name: Atlantis 명령어 감지
        run: |
          comment="${{ github.event.comment.body }}"
          user="${{ github.event.comment.user.login }}"
          
          echo "👤 사용자: $user"
          echo "💬 코멘트: $comment"
          
          if echo "$comment" | grep -q "atlantis plan"; then
            echo "🔍 Atlantis Plan 명령어가 감지되었습니다"
          elif echo "$comment" | grep -q "atlantis apply"; then
            echo "🚀 Atlantis Apply 명령어가 감지되었습니다"  
          elif echo "$comment" | grep -q "atlantis unlock"; then
            echo "🔓 Atlantis Unlock 명령어가 감지되었습니다"
          elif echo "$comment" | grep -q "atlantis help"; then
            echo "❓ Atlantis Help 명령어가 감지되었습니다"
          fi
          
          echo "ℹ️ Atlantis가 이 명령어를 처리할 것입니다"

  atlantis-status-check:
    name: 📊 Atlantis 상태 확인
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.action == 'synchronize'
    
    steps:
      - name: PR 업데이트에 대한 Atlantis 상태 알림
        uses: actions/github-script@v7
        with:
          script: |
            const comment = `## 🔄 PR 업데이트 감지
            
            새로운 커밋이 푸시되었습니다. Atlantis가 자동으로 새로운 Plan을 실행할 예정입니다.
            
            ### 📋 진행 상황
            - ✅ 새 커밋 감지됨
            - ⏳ Atlantis Plan 대기 중...
            - 🤖 AI 리뷰어 준비 완료
            
            *이전 Plan 결과는 무효화되었습니다.*
            
            ---
            *🔄 자동 업데이트: ${new Date().toLocaleString('ko-KR')}*`;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo, 
              issue_number: context.issue.number,
              body: comment
            });

  validate-atlantis-config:
    name: 🔧 atlantis.yaml 검증
    runs-on: ubuntu-latest
    if: contains(github.event.pull_request.changed_files, 'atlantis.yaml')
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: atlantis.yaml 구문 검증
        run: |
          if [ -f "atlantis.yaml" ]; then
            echo "🔍 atlantis.yaml 파일 검증 중..."
            
            # YAML 구문 검증
            if command -v yamllint &> /dev/null; then
              yamllint atlantis.yaml
            else
              echo "yamllint가 없어 Python yaml로 검증합니다"
              python3 -c "import yaml; yaml.safe_load(open('atlantis.yaml'))"
            fi
            
            # 필수 필드 검증
            echo "📋 필수 필드 확인 중..."
            
            if ! grep -q "version:" atlantis.yaml; then
              echo "❌ 'version' 필드가 누락되었습니다"
              exit 1
            fi
            
            if ! grep -q "projects:" atlantis.yaml; then
              echo "❌ 'projects' 필드가 누락되었습니다"  
              exit 1
            fi
            
            echo "✅ atlantis.yaml 구문이 올바릅니다"
          else
            echo "⚠️ atlantis.yaml 파일을 찾을 수 없습니다"
          fi