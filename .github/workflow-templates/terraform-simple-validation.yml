# StackKit Simple Terraform Validation
# 기본적인 Terraform 검증만 수행하는 간단한 워크플로우

name: ✅ Simple Terraform Check

on:
  pull_request:
    paths:
      - 'terraform/**/*.tf'
      - 'terraform/**/*.tfvars'
  push:
    branches: [main, develop]
    paths:
      - 'terraform/**/*.tf'
      - 'terraform/**/*.tfvars'

env:
  TF_VERSION: "1.8.5"

jobs:
  terraform-check:
    name: 🔍 Terraform 기본 검증
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: 변경된 Terraform 디렉토리 찾기
        id: changed-dirs
        run: |
          # 변경된 파일에서 Terraform 디렉토리 추출
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            changed_files=$(git diff --name-only origin/${{ github.base_ref }}..HEAD)
          else
            changed_files=$(git diff --name-only HEAD^ HEAD)
          fi
          
          dirs=()
          for file in $changed_files; do
            if [[ $file == terraform/stacks/* && $file == *.tf ]]; then
              dir=$(dirname "$file")
              if [[ ! " ${dirs[@]} " =~ " ${dir} " ]]; then
                dirs+=("$dir")
              fi
            fi
          done
          
          if [ ${#dirs[@]} -gt 0 ]; then
            echo "has_changes=true" >> $GITHUB_OUTPUT
            dirs_json=$(printf '%s\n' "${dirs[@]}" | jq -R . | jq -s .)
            echo "dirs=${dirs_json}" >> $GITHUB_OUTPUT
            echo "Changed directories: ${dirs[*]}"
          else
            echo "has_changes=false" >> $GITHUB_OUTPUT
            echo "No Terraform changes detected"
          fi

      - name: Terraform Format Check
        if: steps.changed-dirs.outputs.has_changes == 'true'
        run: |
          echo "🎨 Checking Terraform formatting..."
          terraform fmt -check -recursive -diff terraform/ || {
            echo "❌ Terraform files are not properly formatted"
            echo "Run 'terraform fmt -recursive terraform/' to fix"
            exit 1
          }

      - name: Terraform Validate
        if: steps.changed-dirs.outputs.has_changes == 'true'
        run: |
          echo "✅ Validating Terraform configurations..."
          dirs='${{ steps.changed-dirs.outputs.dirs }}'
          
          for dir in $(echo $dirs | jq -r '.[]'); do
            echo "Validating: $dir"
            cd "$dir"
            
            # 간단한 초기화 (백엔드 없이)
            terraform init -backend=false
            terraform validate
            
            cd - > /dev/null
          done

      - name: StackKit 스크립트 검증
        if: steps.changed-dirs.outputs.has_changes == 'true'
        run: |
          echo "🛡️ Running StackKit validation scripts..."
          
          # StackKit 검증 스크립트가 있는지 확인
          if [ -f "terraform/scripts/validate.sh" ]; then
            dirs='${{ steps.changed-dirs.outputs.dirs }}'
            
            for dir in $(echo $dirs | jq -r '.[]'); do
              # 스택 경로에서 프로젝트명과 환경 추출
              if [[ $dir =~ terraform/stacks/([^/]+)/([^/]+) ]]; then
                project="${BASH_REMATCH[1]}"
                env="${BASH_REMATCH[2]}"
                
                echo "Validating stack: $project $env"
                bash terraform/scripts/validate.sh "$project" "$env" --quick || true
              fi
            done
          else
            echo "No StackKit validation script found, skipping..."
          fi

      - name: 결과 요약
        if: always()
        run: |
          if [[ "${{ steps.changed-dirs.outputs.has_changes }}" == "true" ]]; then
            echo "✅ Terraform 검증이 완료되었습니다!"
          else
            echo "ℹ️ Terraform 변경사항이 없어 검증을 건너뛰었습니다."
          fi