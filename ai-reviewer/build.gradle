plugins {
    id 'java'
    id 'application'
}

group = 'com.stackkit'
version = '1.0.0'

repositories {
    mavenCentral()
}

ext {
    awsSdkVersion = '2.25.60'
    jacksonVersion = '2.17.1'
    slf4jVersion = '2.0.7'
}

dependencies {
    // AWS Lambda
    implementation 'com.amazonaws:aws-lambda-java-core:1.2.3'
    implementation 'com.amazonaws:aws-lambda-java-events:3.11.4'
    
    // AWS SDK v2
    implementation "software.amazon.awssdk:s3:${awsSdkVersion}"
    implementation "software.amazon.awssdk:sqs:${awsSdkVersion}"
    implementation "software.amazon.awssdk:url-connection-client:${awsSdkVersion}"
    
    // JSON Processing
    implementation "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"
    implementation "com.fasterxml.jackson.core:jackson-annotations:${jacksonVersion}"
    implementation "com.fasterxml.jackson.core:jackson-core:${jacksonVersion}"
    
    // Logging
    implementation "org.slf4j:slf4j-simple:${slf4jVersion}"
    
    // Test dependencies
    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.0'
    testImplementation 'org.mockito:mockito-core:5.5.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.5.0'
}

// Fat JAR configuration (without Shadow plugin)
jar {
    archiveBaseName = 'atlantis-ai-reviewer'
    archiveVersion = '1.0.0'
    archiveClassifier = ''
    
    // Include all dependencies
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    
    // Optimize JAR size
    exclude 'META-INF/*.SF'
    exclude 'META-INF/*.DSA'
    exclude 'META-INF/*.RSA'
    
    // Handle duplicate files
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    
    manifest {
        attributes(
            'Main-Class': 'com.stackkit.atlantis.reviewer.UnifiedReviewerHandler'
        )
    }
}

// Java compilation settings
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

compileJava {
    options.encoding = 'UTF-8'
    options.compilerArgs += ['-parameters']
}

// Test configuration
test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
    }
}

// Custom tasks
task buildLambda {
    dependsOn jar
    doLast {
        println "‚úÖ Lambda JAR built: ${jar.archiveFile.get().asFile.absolutePath}"
        println "üìè JAR size: ${(jar.archiveFile.get().asFile.length() / 1024 / 1024)} MB"
    }
}

task packageForTerraform {
    dependsOn buildLambda
    doLast {
        def jarFile = jar.archiveFile.get().asFile
        def terraformDir = file("../../terraform/stacks/atlantis-demo/dev")
        def targetDir = file("${terraformDir}/lambda-packages")
        
        targetDir.mkdirs()
        copy {
            from jarFile
            into targetDir
        }
        
        println "üì¶ Lambda package copied to Terraform: ${targetDir}/${jarFile.name}"
    }
}

// Development tasks
task devRun(type: JavaExec) {
    group = 'development'
    description = 'Run the application locally for development'
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'com.stackkit.atlantis.reviewer.LocalTester'
}

wrapper {
    gradleVersion = '8.10.2'
    distributionType = Wrapper.DistributionType.BIN
}