version: 3

# Ïó¨Îü¨ ÌîÑÎ°úÏ†ùÌä∏Î•º Î≥ëÎ†¨Î°ú ÌîåÎûú/Ï†ÅÏö© Í∞ÄÎä•
parallel_plan: true
parallel_apply: true

# === ÌîÑÎ°úÏ†ùÌä∏ Î™©Î°ù ===
projects:
  # ÏòàÏãú 1) shared/prod Ïä§ÌÉù
  - name: shared-prod
    dir: terraform/stacks/shared/prod
    workflow: stackkit-prod
    autoplan:
      enabled: true
      when_modified: ["**/*.tf", "**/*.tfvars", "../../../modules/**"]
    terraform_version: v1.8.5

  # ÏòàÏãú 2) messaging/dev Ïä§ÌÉù
  - name: messaging-dev
    dir: terraform/stacks/messaging/dev
    workflow: stackkit-dev
    autoplan:
      enabled: true
      when_modified: ["**/*.tf", "**/*.tfvars", "../../../modules/**"]
    terraform_version: v1.8.5

  # atlantis-ai-reviewer/dev Ïä§ÌÉù
  - name: atlantis-ai-reviewer-dev
    dir: terraform/stacks/atlantis-ai-reviewer/dev
    workflow: stackkit-dev
    autoplan:
      enabled: true
      when_modified: ["**/*.tf", "**/*.tfvars", "../../../modules/**"]
    terraform_version: v1.8.5

# === Í≥µÌÜµ/ÌôòÍ≤ΩÎ≥Ñ ÏõåÌÅ¨ÌîåÎ°ú ===
workflows:
  # dev ÌôòÍ≤Ω: -var-file dev.tfvars
  stackkit-dev:
    plan:
      steps:
        - init
        - plan:
            # ÎÇ¥Ïû• plan + -var-file Ï∂îÍ∞Ä (ÎÇ¥Ïû• planÏùÄ ÏûêÎèôÏúºÎ°ú -out $PLANFILEÏùÑ ÏÇ¨Ïö©)
            extra_args: ["-input=false", "-var-file", "dev.tfvars"]
        - run: |
            set -euo pipefail
            # 1) ÌîåÎûúÏùÑ JSON/ÌÖçÏä§Ìä∏Î°ú Îç§ÌîÑ
            terraform show -json "$PLANFILE" > tfplan.json
            terraform show "$PLANFILE" > plan.txt
            
            # 2) Infracost ÎπÑÏö© Ï∂îÏ†ï Ïã§Ìñâ
            echo "üí∞ Infracost ÎπÑÏö© Ï∂îÏ†ï Ïã§Ìñâ Ï§ë..."
            if command -v infracost &> /dev/null; then
                # Infracost ÏÑ§Ï†ï ÌôïÏù∏
                if [[ -z "${INFRACOST_API_KEY:-}" ]]; then
                    echo "‚ö†Ô∏è  INFRACOST_API_KEYÍ∞Ä ÏÑ§Ï†ïÎêòÏßÄ ÏïäÏùå. ÎπÑÏö© Ï∂îÏ†ï Í±¥ÎÑàÎõ∞Í∏∞."
                    echo '{"totalMonthlyCost":"0","currency":"USD","projects":[]}' > infracost.json
                else
                    # Infracost Ïã§Ìñâ
                    infracost breakdown \
                        --path . \
                        --format json \
                        --out-file infracost.json \
                        --terraform-plan-path "$PLANFILE" || {
                        echo "‚ö†Ô∏è  Infracost Ïã§Ìñâ Ïã§Ìå®. Í∏∞Î≥∏ ÎπÑÏö© Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ±."
                        echo '{"totalMonthlyCost":"0","currency":"USD","projects":[]}' > infracost.json
                    }
                    
                    # ÏÇ¨ÎûåÏù¥ ÏùΩÍ∏∞ Ïâ¨Ïö¥ ÌòïÌÉúÎ°úÎèÑ ÏÉùÏÑ±
                    infracost breakdown \
                        --path . \
                        --format table \
                        --terraform-plan-path "$PLANFILE" > infracost.txt 2>/dev/null || {
                        echo "ÎπÑÏö© Ï∂îÏ†ï Îç∞Ïù¥ÌÑ∞Î•º Í∞ÄÏ†∏Ïò¨ Ïàò ÏóÜÏäµÎãàÎã§." > infracost.txt
                    }
                fi
            else
                echo "‚ö†Ô∏è  InfracostÍ∞Ä ÏÑ§ÏπòÎêòÏßÄ ÏïäÏùå. Í∏∞Î≥∏ ÎπÑÏö© Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ±."
                echo '{"totalMonthlyCost":"0","currency":"USD","projects":[]}' > infracost.json
                echo "InfracostÍ∞Ä ÏÑ§ÏπòÎêòÏßÄ ÏïäÏïÑ ÎπÑÏö© Ï∂îÏ†ïÏùÑ ÏàòÌñâÌï† Ïàò ÏóÜÏäµÎãàÎã§." > infracost.txt
            fi
            
            # 3) ÏóÖÎ°úÎìú Í≤ΩÎ°ú Íµ¨ÏÑ±
            BUCKET="${PLAN_BUCKET:-plan-artifacts}"
            PREFIX="atlantis/${BASE_REPO_OWNER}/${BASE_REPO_NAME}/${PULL_NUM}/${PROJECT_NAME:-$(basename "$REPO_REL_DIR" | tr '/' '-')}"
            
            # 4) Î≥ÄÍ≤Ω Ïú†Î¨¥(Î¶¨ÏÜåÏä§ Î≥ÄÌôî Ïó¨Î∂Ä) Í≥ÑÏÇ∞
            HAS_CHANGES=$(jq '(.resource_changes|length) > 0' tfplan.json)
            
            # 5) ÎπÑÏö© Ï†ïÎ≥¥ Ï∂îÏ∂ú
            MONTHLY_COST=$(jq -r '.totalMonthlyCost // "0"' infracost.json 2>/dev/null || echo "0")
            
            # 6) Î©îÌÉÄ(manifest) ÏÉùÏÑ± (ÎπÑÏö© Ï†ïÎ≥¥ Ìè¨Ìï®)
            jq -n --arg repo "${BASE_REPO_OWNER}/${BASE_REPO_NAME}" \
                  --arg pr "$PULL_NUM" \
                  --arg proj "$PROJECT_NAME" \
                  --arg action "plan" \
                  --arg status "success" \
                  --arg commit "$HEAD_COMMIT" \
                  --arg cost "$MONTHLY_COST" \
                  --argjson has "$HAS_CHANGES" \
                  '{repo:$repo,pr:($pr|tonumber),project:$proj,action:$action,status:$status,commit:$commit,has_changes:$has,monthly_cost:$cost}' \
              > manifest.json
            
            # 7) S3 ÏóÖÎ°úÎìú (Infracost Í≤∞Í≥º Ìè¨Ìï®)
            aws s3 cp "$PLANFILE"      "s3://$BUCKET/$PREFIX/tfplan.bin"
            aws s3 cp tfplan.json      "s3://$BUCKET/$PREFIX/tfplan.json"
            aws s3 cp plan.txt         "s3://$BUCKET/$PREFIX/plan.txt"
            aws s3 cp infracost.json   "s3://$BUCKET/$PREFIX/infracost.json"
            aws s3 cp infracost.txt    "s3://$BUCKET/$PREFIX/infracost.txt"
            aws s3 cp manifest.json    "s3://$BUCKET/$PREFIX/manifest.json"
            
            echo "üì§ Plan Í≤∞Í≥º Î∞è ÎπÑÏö© Ï∂îÏ†ïÏù¥ AI Î¶¨Î∑∞Î•º ÏúÑÌï¥ ÏóÖÎ°úÎìúÎêòÏóàÏäµÎãàÎã§."
            echo "üí∞ ÏòàÏÉÅ ÏõîÍ∞Ñ ÎπÑÏö©: $MONTHLY_COST USD"
    apply:
      steps:
        # ÎÇ¥Ïû• apply ÎåÄÏã† Ïª§Ïä§ÌÖÄ Ïã§Ìñâ(Î°úÍ∑∏ ÌååÏùº Î≥¥Ï°¥)
        - run: |
            set +e
            terraform apply -input=false -no-color "$PLANFILE" | tee apply.txt
            STATUS=$?
            set -e
            BUCKET="${PLAN_BUCKET:-plan-artifacts}"
            PREFIX="atlantis/${BASE_REPO_OWNER}/${BASE_REPO_NAME}/${PULL_NUM}/${PROJECT_NAME:-$(basename "$REPO_REL_DIR" | tr '/' '-')}"
            jq -n --arg repo "${BASE_REPO_OWNER}/${BASE_REPO_NAME}" \
                  --arg pr "$PULL_NUM" \
                  --arg proj "$PROJECT_NAME" \
                  --arg action "apply" \
                  --arg status "$([ $STATUS -eq 0 ] && echo success || echo failure)" \
                  --arg commit "$HEAD_COMMIT" \
                  '{repo:$repo,pr:($pr|tonumber),project:$proj,action:$action,status:$status,commit:$commit}' \
              > manifest.json
            aws s3 cp apply.txt      "s3://$BUCKET/$PREFIX/apply.txt"
            aws s3 cp manifest.json  "s3://$BUCKET/$PREFIX/manifest.json"
            exit $STATUS

  # prod ÌôòÍ≤Ω: -var-file prod.tfvars
  stackkit-prod:
    plan:
      steps:
        - init
        - plan:
            extra_args: ["-input=false", "-var-file", "prod.tfvars"]
        - run: |
            set -euo pipefail
            # 1) ÌîåÎûúÏùÑ JSON/ÌÖçÏä§Ìä∏Î°ú Îç§ÌîÑ
            terraform show -json "$PLANFILE" > tfplan.json
            terraform show "$PLANFILE" > plan.txt
            
            # 2) Infracost ÎπÑÏö© Ï∂îÏ†ï Ïã§Ìñâ (prod ÌôòÍ≤ΩÏö©)
            echo "üí∞ Infracost ÎπÑÏö© Ï∂îÏ†ï Ïã§Ìñâ Ï§ë..."
            if command -v infracost &> /dev/null; then
                if [[ -z "${INFRACOST_API_KEY:-}" ]]; then
                    echo "‚ö†Ô∏è  INFRACOST_API_KEYÍ∞Ä ÏÑ§Ï†ïÎêòÏßÄ ÏïäÏùå. ÎπÑÏö© Ï∂îÏ†ï Í±¥ÎÑàÎõ∞Í∏∞."
                    echo '{"totalMonthlyCost":"0","currency":"USD","projects":[]}' > infracost.json
                else
                    infracost breakdown \
                        --path . \
                        --format json \
                        --out-file infracost.json \
                        --terraform-plan-path "$PLANFILE" || {
                        echo "‚ö†Ô∏è  Infracost Ïã§Ìñâ Ïã§Ìå®. Í∏∞Î≥∏ ÎπÑÏö© Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ±."
                        echo '{"totalMonthlyCost":"0","currency":"USD","projects":[]}' > infracost.json
                    }
                    
                    infracost breakdown \
                        --path . \
                        --format table \
                        --terraform-plan-path "$PLANFILE" > infracost.txt 2>/dev/null || {
                        echo "ÎπÑÏö© Ï∂îÏ†ï Îç∞Ïù¥ÌÑ∞Î•º Í∞ÄÏ†∏Ïò¨ Ïàò ÏóÜÏäµÎãàÎã§." > infracost.txt
                    }
                fi
            else
                echo "‚ö†Ô∏è  InfracostÍ∞Ä ÏÑ§ÏπòÎêòÏßÄ ÏïäÏùå. Í∏∞Î≥∏ ÎπÑÏö© Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ±."
                echo '{"totalMonthlyCost":"0","currency":"USD","projects":[]}' > infracost.json
                echo "InfracostÍ∞Ä ÏÑ§ÏπòÎêòÏßÄ ÏïäÏïÑ ÎπÑÏö© Ï∂îÏ†ïÏùÑ ÏàòÌñâÌï† Ïàò ÏóÜÏäµÎãàÎã§." > infracost.txt
            fi
            
            # 3) ÏóÖÎ°úÎìú Í≤ΩÎ°ú Íµ¨ÏÑ±
            BUCKET="${PLAN_BUCKET:-plan-artifacts}"
            PREFIX="atlantis/${BASE_REPO_OWNER}/${BASE_REPO_NAME}/${PULL_NUM}/${PROJECT_NAME:-$(basename "$REPO_REL_DIR" | tr '/' '-')}"
            
            # 4) Î≥ÄÍ≤Ω Ïú†Î¨¥ Î∞è ÎπÑÏö© Ï†ïÎ≥¥ Í≥ÑÏÇ∞
            HAS_CHANGES=$(jq '(.resource_changes|length) > 0' tfplan.json)
            MONTHLY_COST=$(jq -r '.totalMonthlyCost // "0"' infracost.json 2>/dev/null || echo "0")
            
            # 5) Î©îÌÉÄ(manifest) ÏÉùÏÑ± (ÎπÑÏö© Ï†ïÎ≥¥ Ìè¨Ìï®)
            jq -n --arg repo "${BASE_REPO_OWNER}/${BASE_REPO_NAME}" \
                  --arg pr "$PULL_NUM" \
                  --arg proj "$PROJECT_NAME" \
                  --arg action "plan" \
                  --arg status "success" \
                  --arg commit "$HEAD_COMMIT" \
                  --arg cost "$MONTHLY_COST" \
                  --argjson has "$HAS_CHANGES" \
                  '{repo:$repo,pr:($pr|tonumber),project:$proj,action:$action,status:$status,commit:$commit,has_changes:$has,monthly_cost:$cost}' \
              > manifest.json
            
            # 6) S3 ÏóÖÎ°úÎìú (Infracost Í≤∞Í≥º Ìè¨Ìï®)
            aws s3 cp "$PLANFILE"      "s3://$BUCKET/$PREFIX/tfplan.bin"
            aws s3 cp tfplan.json      "s3://$BUCKET/$PREFIX/tfplan.json"
            aws s3 cp plan.txt         "s3://$BUCKET/$PREFIX/plan.txt"
            aws s3 cp infracost.json   "s3://$BUCKET/$PREFIX/infracost.json"
            aws s3 cp infracost.txt    "s3://$BUCKET/$PREFIX/infracost.txt"
            aws s3 cp manifest.json    "s3://$BUCKET/$PREFIX/manifest.json"
            
            echo "üì§ Plan Í≤∞Í≥º Î∞è ÎπÑÏö© Ï∂îÏ†ïÏù¥ AI Î¶¨Î∑∞Î•º ÏúÑÌï¥ ÏóÖÎ°úÎìúÎêòÏóàÏäµÎãàÎã§."
            echo "üí∞ ÏòàÏÉÅ ÏõîÍ∞Ñ ÎπÑÏö©: $MONTHLY_COST USD"
    apply:
      steps:
        - run: |
            set +e
            terraform apply -input=false -no-color "$PLANFILE" | tee apply.txt
            STATUS=$?
            set -e
            BUCKET="${PLAN_BUCKET:-plan-artifacts}"
            PREFIX="atlantis/${BASE_REPO_OWNER}/${BASE_REPO_NAME}/${PULL_NUM}/${PROJECT_NAME:-$(basename "$REPO_REL_DIR" | tr '/' '-')}"
            jq -n --arg repo "${BASE_REPO_OWNER}/${BASE_REPO_NAME}" \
                  --arg pr "$PULL_NUM" \
                  --arg proj "$PROJECT_NAME" \
                  --arg action "apply" \
                  --arg status "$([ $STATUS -eq 0 ] && echo success || echo failure)" \
                  --arg commit "$HEAD_COMMIT" \
                  '{repo:$repo,pr:($pr|tonumber),project:$proj,action:$action,status:$status,commit:$commit}' \
              > manifest.json
            aws s3 cp apply.txt      "s3://$BUCKET/$PREFIX/apply.txt"
            aws s3 cp manifest.json  "s3://$BUCKET/$PREFIX/manifest.json"
            exit $STATUS
