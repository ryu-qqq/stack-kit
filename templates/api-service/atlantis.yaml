# Atlantis Configuration for StackKit v2 API Service
# GitOps workflow automation for infrastructure changes

version: 3

automerge: false
delete_source_branch_on_merge: true
parallel_plan: true
parallel_apply: false

# =============================================================================
# Project Configurations
# =============================================================================

projects:
  # Development Environment
  - name: PROJECT_NAME_PLACEHOLDER-dev
    branch: /.*/
    dir: environments/dev
    terraform_version: v1.7.5
    workflow: development
    
    # Auto-plan when these files change
    autoplan:
      when_modified: 
        - "../../*.tf"
        - "../../modules/**/*.tf"
        - "*.tf"
        - "*.tfvars"
        - "terraform.tfvars"
      enabled: true
    
    # Requirements for apply
    apply_requirements: 
      - approved
      - mergeable
    
    # Custom workflow for development
    workflow: development

  # Staging Environment  
  - name: PROJECT_NAME_PLACEHOLDER-staging
    branch: /^(main|develop)$/
    dir: environments/staging
    terraform_version: v1.7.5
    workflow: staging
    
    autoplan:
      when_modified:
        - "../../*.tf"
        - "../../modules/**/*.tf" 
        - "*.tf"
        - "*.tfvars"
        - "terraform.tfvars"
      enabled: true
    
    apply_requirements:
      - approved
      - mergeable
    
    workflow: staging

  # Production Environment
  - name: PROJECT_NAME_PLACEHOLDER-prod
    branch: /^main$/
    dir: environments/prod
    terraform_version: v1.7.5
    workflow: production
    
    autoplan:
      when_modified:
        - "../../*.tf"
        - "../../modules/**/*.tf"
        - "*.tf"
        - "*.tfvars" 
        - "terraform.tfvars"
      enabled: true
    
    apply_requirements:
      - approved
      - mergeable
    
    workflow: production

# =============================================================================
# Workflow Definitions
# =============================================================================

workflows:
  # Development Workflow
  development:
    plan:
      steps:
        - run: |
            echo "🏗️ Planning development infrastructure for PROJECT_NAME_PLACEHOLDER"
            echo "Environment: Development"
            echo "Team: TEAM_NAME_PLACEHOLDER"
        - init:
            extra_args: [-upgrade]
        - plan:
            extra_args: [-var-file=terraform.tfvars]
        - run: |
            echo "📊 Generating cost analysis..."
            if command -v infracost &> /dev/null; then
              infracost breakdown --path . --format table
            else
              echo "⚠️ Infracost not available - skipping cost analysis"
            fi
        - run: |
            echo "🔍 Running additional validations..."
            terraform fmt -check=true
            if command -v tflint &> /dev/null; then
              tflint
            fi
            
    apply:
      steps:
        - run: |
            echo "🚀 Applying development infrastructure..."
            echo "⚠️ This will modify AWS resources in the development environment"
        - apply
        - run: |
            echo "✅ Development deployment complete!"
            echo "📊 Infrastructure summary:"
            terraform state list | wc -l | xargs echo "Total resources:"
            
            if terraform output application_url > /dev/null 2>&1; then
              echo "🔗 Application URL: $(terraform output -raw application_url)"
            fi
            
            if terraform output health_check_url > /dev/null 2>&1; then
              echo "🏥 Health Check: $(terraform output -raw health_check_url)"
            fi

  # Staging Workflow
  staging:
    plan:
      steps:
        - run: |
            echo "🏗️ Planning staging infrastructure for PROJECT_NAME_PLACEHOLDER"
            echo "Environment: Staging"
            echo "⚠️ This environment mirrors production settings"
        - init:
            extra_args: [-upgrade]
        - plan:
            extra_args: [-var-file=terraform.tfvars]
        - run: |
            echo "📊 Analyzing costs and security..."
            if command -v infracost &> /dev/null; then
              infracost breakdown --path . --format table
            fi
            if command -v tfsec &> /dev/null; then
              tfsec . --soft-fail
            fi
            
    apply:
      steps:
        - run: |
            echo "🚀 Deploying to staging environment..."
            echo "🔍 Pre-deployment validation:"
            terraform validate
        - apply
        - run: |
            echo "✅ Staging deployment complete!"
            echo "🧪 Ready for production validation"

  # Production Workflow (Extra Safeguards)
  production:
    plan:
      steps:
        - run: |
            echo "🏗️ Planning PRODUCTION infrastructure for PROJECT_NAME_PLACEHOLDER"
            echo "Environment: Production"
            echo "⚠️⚠️⚠️ PRODUCTION ENVIRONMENT - EXTRA CAUTION REQUIRED ⚠️⚠️⚠️"
            echo "Team: TEAM_NAME_PLACEHOLDER"
        - init:
            extra_args: [-upgrade]
        - run: |
            echo "🔍 Pre-plan validation..."
            terraform validate
            terraform fmt -check=true
        - plan:
            extra_args: [-var-file=terraform.tfvars]
        - run: |
            echo "📊 Production cost analysis:"
            if command -v infracost &> /dev/null; then
              infracost breakdown --path . --format table
              echo ""
              echo "💰 Cost impact summary above - please review carefully"
            else
              echo "⚠️ Infracost not available - manual cost review required"
            fi
        - run: |
            echo "🔒 Security scan:"
            if command -v tfsec &> /dev/null; then
              tfsec . --soft-fail
            fi
            if command -v checkov &> /dev/null; then
              checkov -d . --framework terraform --soft-fail
            fi
        - run: |
            echo "⚠️ PRODUCTION DEPLOYMENT CHECKLIST:"
            echo "✓ Plan reviewed by team lead"
            echo "✓ Security scan passed"
            echo "✓ Cost impact reviewed"
            echo "✓ Backup/rollback plan ready"
            echo "✓ Monitoring alerts configured"
            echo ""
            echo "🚨 Proceed with apply only if all checks are complete!"
            
    apply:
      steps:
        - run: |
            echo "🚀 APPLYING TO PRODUCTION..."
            echo "🔒 Final security check:"
            terraform validate
        - run: |
            echo "📸 Creating state backup..."
            # Note: State backup should be handled by your backend configuration
            echo "State backup is managed by S3 backend versioning"
        - apply
        - run: |
            echo "🎉 PRODUCTION DEPLOYMENT SUCCESSFUL!"
            echo ""
            echo "📊 Deployment Summary:"
            terraform state list | wc -l | xargs echo "Total resources:"
            
            echo ""
            echo "🔗 Application URLs:"
            if terraform output application_url > /dev/null 2>&1; then
              echo "  Production App: $(terraform output -raw application_url)"
            fi
            if terraform output health_check_url > /dev/null 2>&1; then
              echo "  Health Check: $(terraform output -raw health_check_url)"
            fi
            
            echo ""
            echo "📈 Next Steps:"
            echo "  1. Verify application health at the URLs above"
            echo "  2. Check CloudWatch dashboards for metrics"
            echo "  3. Monitor alerts for any issues"
            echo "  4. Update team on deployment status"
        - run: |
            echo "🔔 Post-deployment verification..."
            # Add custom verification steps here
            # For example: health checks, smoke tests, etc.
            echo "Manual verification required - check application health"

# =============================================================================
# Repository-level Settings  
# =============================================================================

# Allowed overrides for repo config
allowed_overrides: [apply_requirements, workflow]

# Allowed workflows that can be used
allowed_workflows: [development, staging, production]

# Silence Atlantis comments on PRs for cleaner experience
silence_whitelist_errors: false
silence_fork_pr_errors: true