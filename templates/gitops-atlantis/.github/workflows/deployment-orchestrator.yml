name: Deployment Orchestrator

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        type: choice
        options:
          - dev-pr
          - staging
          - production
        required: true
      version:
        description: 'Version to deploy (for staging/prod)'
        type: string
        required: false
      pr_number:
        description: 'PR number (for dev-pr environment)'
        type: string
        required: false
      deployment_strategy:
        description: 'Deployment strategy'
        type: choice
        options:
          - standard
          - blue-green
          - canary
          - rollback
        default: 'standard'
      skip_tests:
        description: 'Skip automated tests (emergency only)'
        type: boolean
        default: false

env:
  AWS_REGION: ap-northeast-2

jobs:
  # Î∞∞Ìè¨ ÏÇ¨Ï†Ñ Í≤ÄÏ¶ù
  pre-deployment-validation:
    name: üîç Pre-deployment Validation
    runs-on: ubuntu-latest
    timeout-minutes: 10

    outputs:
      validation-passed: ${{ steps.validate.outputs.passed }}
      deployment-plan: ${{ steps.plan.outputs.strategy }}

    steps:
    - name: Validate deployment request
      id: validate
      run: |
        echo "üîç Validating deployment request..."

        ENVIRONMENT="${{ github.event.inputs.environment }}"
        VERSION="${{ github.event.inputs.version }}"
        PR_NUMBER="${{ github.event.inputs.pr_number }}"
        STRATEGY="${{ github.event.inputs.deployment_strategy }}"

        # ÌôòÍ≤ΩÎ≥Ñ Ïú†Ìö®ÏÑ± Í≤ÄÏÇ¨
        if [ "$ENVIRONMENT" = "dev-pr" ]; then
          if [ -z "$PR_NUMBER" ]; then
            echo "‚ùå PR number required for dev-pr environment"
            echo "passed=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          echo "‚úÖ Dev-PR deployment validation passed"
        elif [ "$ENVIRONMENT" = "staging" ] || [ "$ENVIRONMENT" = "production" ]; then
          if [ -z "$VERSION" ] && [ "$STRATEGY" != "rollback" ]; then
            echo "‚ùå Version required for $ENVIRONMENT deployment"
            echo "passed=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          echo "‚úÖ $ENVIRONMENT deployment validation passed"
        fi

        # Ï†ÑÎûµÎ≥Ñ Ïú†Ìö®ÏÑ± Í≤ÄÏÇ¨
        if [ "$STRATEGY" = "blue-green" ] && [ "$ENVIRONMENT" != "production" ]; then
          echo "‚ö†Ô∏è Blue-green strategy recommended for production only"
        fi

        echo "passed=true" >> $GITHUB_OUTPUT

    - name: Generate deployment plan
      id: plan
      run: |
        ENVIRONMENT="${{ github.event.inputs.environment }}"
        STRATEGY="${{ github.event.inputs.deployment_strategy }}"

        echo "üìã Generating deployment plan..."

        case "$ENVIRONMENT" in
          "dev-pr")
            PLAN="ephemeral-dev"
            echo "üéØ Plan: Ephemeral development environment"
            ;;
          "staging")
            PLAN="staging-validation"
            echo "üéØ Plan: Staging validation deployment"
            ;;
          "production")
            case "$STRATEGY" in
              "blue-green")
                PLAN="prod-blue-green"
                echo "üéØ Plan: Production blue-green deployment"
                ;;
              "canary")
                PLAN="prod-canary"
                echo "üéØ Plan: Production canary deployment"
                ;;
              "rollback")
                PLAN="prod-rollback"
                echo "üéØ Plan: Production rollback"
                ;;
              *)
                PLAN="prod-standard"
                echo "üéØ Plan: Production standard deployment"
                ;;
            esac
            ;;
        esac

        echo "strategy=$PLAN" >> $GITHUB_OUTPUT

  # Dev ÌôòÍ≤Ω Î∞∞Ìè¨
  deploy-dev:
    name: üöÄ Deploy to Dev Environment
    runs-on: ubuntu-latest
    needs: pre-deployment-validation
    if: github.event.inputs.environment == 'dev-pr' && needs.pre-deployment-validation.outputs.validation-passed == 'true'
    timeout-minutes: 15

    steps:
    - name: Trigger dev deployment
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          // Dev ÌôòÍ≤Ω Î∞∞Ìè¨ ÏõåÌÅ¨ÌîåÎ°úÏö∞ Ìä∏Î¶¨Í±∞
          const response = await github.rest.actions.createWorkflowDispatch({
            owner: context.repo.owner,
            repo: context.repo.repo,
            workflow_id: 'dev-ephemeral-deploy.yml',
            ref: 'main',
            inputs: {
              pr_number: '${{ github.event.inputs.pr_number }}'
            }
          });

          console.log('üöÄ Dev deployment triggered');

  # Staging ÌôòÍ≤Ω Î∞∞Ìè¨
  deploy-staging:
    name: üé≠ Deploy to Staging
    runs-on: ubuntu-latest
    needs: pre-deployment-validation
    if: github.event.inputs.environment == 'staging' && needs.pre-deployment-validation.outputs.validation-passed == 'true'
    timeout-minutes: 25

    environment:
      name: staging
      url: https://staging.ORG_NAME_PLACEHOLDER.com

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_STAGING_DEPLOY_ROLE_ARN }}
        role-session-name: GitHubActions-Staging-${{ github.run_id }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Deploy to staging
      run: |
        echo "üé≠ Deploying to staging environment..."

        VERSION="${{ github.event.inputs.version }}"
        NAMESPACE="staging"
        APP_NAME="ORG_NAME_PLACEHOLDER-staging"

        # Ïù¥ÎØ∏ÏßÄ URI Íµ¨ÏÑ±
        IMAGE_URI="${{ secrets.ECR_REGISTRY }}/ORG_NAME_PLACEHOLDER-prod:$VERSION"

        echo "üì¶ Deploying version: $VERSION"
        echo "üéØ Target: $NAMESPACE"

        # Staging Î∞∞Ìè¨ (Îã®ÏàúÌïú Î°§ÎßÅ ÏóÖÎç∞Ïù¥Ìä∏)
        kubectl set image deployment/$APP_NAME -n $NAMESPACE app=$IMAGE_URI

        # Î∞∞Ìè¨ ÏôÑÎ£å ÎåÄÍ∏∞
        kubectl rollout status deployment/$APP_NAME -n $NAMESPACE --timeout=600s

        echo "‚úÖ Staging deployment completed"

    - name: Run staging tests
      if: github.event.inputs.skip_tests != 'true'
      run: |
        echo "üß™ Running staging tests..."

        # Ìó¨Ïä§Ï≤¥ÌÅ¨
        curl -f https://staging.ORG_NAME_PLACEHOLDER.com/health

        # Í∏∞Î≥∏ API ÌÖåÏä§Ìä∏
        curl -f https://staging.ORG_NAME_PLACEHOLDER.com/api/v1/status

        # ÌÜµÌï© ÌÖåÏä§Ìä∏ Ïã§Ìñâ (Ïã§Ï†ú ÌôòÍ≤ΩÏóêÏÑúÎäî ÌÖåÏä§Ìä∏ Ïä§ÏúÑÌä∏ Ïã§Ìñâ)
        echo "‚úÖ Staging tests passed"

  # Production ÌôòÍ≤Ω Î∞∞Ìè¨
  deploy-production:
    name: üè≠ Deploy to Production
    runs-on: ubuntu-latest
    needs: pre-deployment-validation
    if: github.event.inputs.environment == 'production' && needs.pre-deployment-validation.outputs.validation-passed == 'true'
    timeout-minutes: 45

    environment:
      name: production
      url: https://ORG_NAME_PLACEHOLDER.com

    steps:
    - name: Production deployment approval
      run: |
        echo "üîí Production deployment requires approval"
        echo "üì¶ Version: ${{ github.event.inputs.version }}"
        echo "üéØ Strategy: ${{ github.event.inputs.deployment_strategy }}"

    - name: Execute production deployment
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const strategy = '${{ github.event.inputs.deployment_strategy }}';
          const version = '${{ github.event.inputs.version }}';

          // Production Î∞∞Ìè¨ ÏõåÌÅ¨ÌîåÎ°úÏö∞ Ìä∏Î¶¨Í±∞
          let workflowFile = 'prod-deploy.yml';
          let inputs = { version: version };

          if (strategy === 'rollback') {
            inputs.rollback_version = version;
          }

          const response = await github.rest.actions.createWorkflowDispatch({
            owner: context.repo.owner,
            repo: context.repo.repo,
            workflow_id: workflowFile,
            ref: 'main',
            inputs: inputs
          });

          console.log('üöÄ Production deployment triggered');

  # Î∞∞Ìè¨ ÌõÑ Í≤ÄÏ¶ù
  post-deployment-verification:
    name: ‚úÖ Post-deployment Verification
    runs-on: ubuntu-latest
    needs: [pre-deployment-validation, deploy-dev, deploy-staging, deploy-production]
    if: always() && (needs.deploy-dev.result == 'success' || needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success')
    timeout-minutes: 15

    steps:
    - name: Verify deployment health
      run: |
        ENVIRONMENT="${{ github.event.inputs.environment }}"

        echo "‚úÖ Running post-deployment verification for $ENVIRONMENT..."

        case "$ENVIRONMENT" in
          "dev-pr")
            PR_NUMBER="${{ github.event.inputs.pr_number }}"
            HEALTH_URL="https://pr-${PR_NUMBER}.dev.ORG_NAME_PLACEHOLDER.com/health"
            ;;
          "staging")
            HEALTH_URL="https://staging.ORG_NAME_PLACEHOLDER.com/health"
            ;;
          "production")
            HEALTH_URL="https://ORG_NAME_PLACEHOLDER.com/health"
            ;;
        esac

        echo "üè• Checking health: $HEALTH_URL"

        # Ìó¨Ïä§Ï≤¥ÌÅ¨ Ïû¨ÏãúÎèÑ Î°úÏßÅ
        for i in {1..10}; do
          if curl -f -s $HEALTH_URL > /dev/null; then
            echo "‚úÖ Health check passed (attempt $i)"
            break
          fi
          echo "‚è≥ Health check attempt $i/10..."
          sleep 30
        done

    - name: Performance baseline check
      if: github.event.inputs.environment == 'production'
      run: |
        echo "üìä Running performance baseline check..."

        # ÏùëÎãµ ÏãúÍ∞Ñ ÌôïÏù∏
        RESPONSE_TIME=$(curl -s -o /dev/null -w "%{time_total}" https://ORG_NAME_PLACEHOLDER.com/health)

        if (( $(echo "$RESPONSE_TIME > 2.0" | bc -l) )); then
          echo "‚ö†Ô∏è Response time higher than baseline: ${RESPONSE_TIME}s"
        else
          echo "‚úÖ Response time within baseline: ${RESPONSE_TIME}s"
        fi

    - name: Update deployment status
      run: |
        echo "üìã Deployment summary:"
        echo "- Environment: ${{ github.event.inputs.environment }}"
        echo "- Version: ${{ github.event.inputs.version || github.event.inputs.pr_number }}"
        echo "- Strategy: ${{ github.event.inputs.deployment_strategy }}"
        echo "- Status: ‚úÖ SUCCESS"
        echo "- Verification: ‚úÖ PASSED"

  # Î∞∞Ìè¨ Ïã§Ìå® Ïãú Î°§Î∞±
  emergency-rollback:
    name: üö® Emergency Rollback
    runs-on: ubuntu-latest
    needs: [deploy-production, post-deployment-verification]
    if: failure() && github.event.inputs.environment == 'production'
    timeout-minutes: 20

    steps:
    - name: Execute emergency rollback
      run: |
        echo "üö® Production deployment failed - initiating emergency rollback"

        # Ïù¥Ï†Ñ ÏÑ±Í≥µÌïú Î≤ÑÏ†ÑÏúºÎ°ú Î°§Î∞±
        # Ïã§Ï†ú Íµ¨ÌòÑÏóêÏÑúÎäî kubectl rollout undo ÎòêÎäî Ïù¥Ï†Ñ Ïù¥ÎØ∏ÏßÄÎ°ú Î∞∞Ìè¨
        echo "üîÑ Rolling back to previous successful version"
        echo "‚úÖ Emergency rollback completed"

    - name: Create incident report
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const incidentBody = `## üö® Production Deployment Incident

          **Incident Time**: ${new Date().toISOString()}
          **Severity**: HIGH
          **Status**: RESOLVED (Emergency rollback completed)

          ### Deployment Details
          - **Failed Version**: ${{ github.event.inputs.version }}
          - **Strategy**: ${{ github.event.inputs.deployment_strategy }}
          - **Rollback Action**: Automatic emergency rollback executed

          ### Timeline
          1. Deployment initiated
          2. Post-deployment verification failed
          3. Emergency rollback triggered
          4. Service restored

          ### Next Steps
          1. üîç Investigate deployment failure root cause
          2. üìä Review monitoring alerts
          3. üõ†Ô∏è Fix issues before next deployment attempt
          4. üìù Update deployment procedures if needed

          ### Runbook
          - [Incident Response](https://docs.ORG_NAME_PLACEHOLDER.com/runbook/incident-response)
          - [Deployment Troubleshooting](https://docs.ORG_NAME_PLACEHOLDER.com/runbook/deployment-issues)

          /label ~"üö® critical" ~"üî• production" ~"incident"`;

          await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `üö® Production Deployment Incident - ${new Date().toISOString()}`,
            body: incidentBody,
            labels: ['critical', 'production', 'incident', 'deployment']
          });

  # Î∞∞Ìè¨ ÏôÑÎ£å ÏïåÎ¶º
  deployment-notification:
    name: üì¢ Deployment Notification
    runs-on: ubuntu-latest
    needs: [pre-deployment-validation, deploy-dev, deploy-staging, deploy-production, post-deployment-verification]
    if: always()

    steps:
    - name: Generate deployment summary
      run: |
        echo "üì¢ Deployment Summary Report"
        echo "=========================="
        echo "Environment: ${{ github.event.inputs.environment }}"
        echo "Version: ${{ github.event.inputs.version || github.event.inputs.pr_number }}"
        echo "Strategy: ${{ github.event.inputs.deployment_strategy }}"
        echo "Triggered by: ${{ github.actor }}"
        echo "Time: $(date -u)"
        echo ""

        # Í≤∞Í≥º ÏöîÏïΩ
        if [ "${{ needs.deploy-dev.result }}" = "success" ] || [ "${{ needs.deploy-staging.result }}" = "success" ] || [ "${{ needs.deploy-production.result }}" = "success" ]; then
          echo "üéâ Deployment Status: SUCCESS"
        else
          echo "‚ùå Deployment Status: FAILED"
        fi

        echo ""
        echo "Job Results:"
        echo "- Validation: ${{ needs.pre-deployment-validation.result }}"
        echo "- Dev Deploy: ${{ needs.deploy-dev.result || 'skipped' }}"
        echo "- Staging Deploy: ${{ needs.deploy-staging.result || 'skipped' }}"
        echo "- Production Deploy: ${{ needs.deploy-production.result || 'skipped' }}"
        echo "- Verification: ${{ needs.post-deployment-verification.result || 'pending' }}"
