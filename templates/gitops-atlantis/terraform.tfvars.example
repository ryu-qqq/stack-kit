# =======================================
# StackKit GitOps Atlantis Configuration
# =======================================
# Following StackKit variable naming standards

# =====================================
# 1. PROJECT METADATA (Required)
# =====================================

project_name = "gitops"
team         = "platform"
organization = "your-company"
environment  = "prod"  # dev, staging, prod

cost_center = "platform-team"
owner_email = "platform@your-company.com"

# =====================================
# 2. AWS CONFIGURATION
# =====================================

aws_region = "ap-northeast-2"

# =====================================
# 3. NETWORKING
# =====================================

# VPC Configuration
use_existing_vpc = false
vpc_cidr         = "10.100.0.0/16"  # Dedicated VPC for shared infrastructure

# If using existing VPC, uncomment and configure:
# existing_vpc_id             = "vpc-xxxxxxxxx"
# existing_public_subnet_ids  = ["subnet-xxx", "subnet-yyy"]
# existing_private_subnet_ids = ["subnet-aaa", "subnet-bbb"]

enable_nat_gateway = true

# Security (restrict in production)
allowed_cidr_blocks = ["0.0.0.0/0"]  # TODO: Restrict to office/VPN IPs

# =====================================
# 4. ECS CONFIGURATION
# =====================================

# Cluster
enable_container_insights = true

# Task Resources
ecs_task_cpu    = "512"   # 256, 512, 1024, 2048, 4096
ecs_task_memory = "1024"  # MB

# Service Scaling
ecs_min_capacity = 1
ecs_max_capacity = 3
desired_count    = 1

# Auto Scaling
enable_autoscaling         = true
target_cpu_utilization    = 70
target_memory_utilization = 80

# =====================================
# 5. LOAD BALANCER
# =====================================

# HTTPS Configuration
certificate_arn = ""  # TODO: Create ACM certificate for your domain
additional_certificate_arns = []
ssl_policy = "ELBSecurityPolicy-TLS-1-2-2017-01"

enable_deletion_protection = false  # Set true for production

# Health Check
health_check_path     = "/healthz"
health_check_interval = 30

# =====================================
# 6. STORAGE
# =====================================

# EFS (for Atlantis data persistence)
enable_efs           = true
efs_performance_mode = "generalPurpose"  # or "maxIO"
efs_throughput_mode  = "bursting"        # or "provisioned"
efs_lifecycle_policy = "AFTER_30_DAYS"

# Terraform State Management
create_terraform_state_bucket = false  # Usually managed separately
create_terraform_lock_table   = false

# =====================================
# 7. SECURITY
# =====================================

secret_recovery_window_days = 7

# =====================================
# 8. LOGGING
# =====================================

log_retention_days = 7  # 1, 3, 5, 7, 14, 30, 60, 90...

# =====================================
# 9. ATLANTIS CONFIGURATION
# =====================================

# NOTE: GitHub token is retrieved from AWS Secrets Manager (see data.tf)
# Before deployment, create the secret:
# aws secretsmanager create-secret --name atlantis/github-token --secret-string '{"token":"ghp_your_token"}'

atlantis_host               = "atlantis.your-company.com"  # TODO: Update domain
atlantis_port               = 4141
atlantis_image              = "runatlantis/atlantis:latest"
atlantis_repo_allowlist     = "github.com/your-org/*"      # TODO: Update org
atlantis_repo_config        = "atlantis.yaml"
atlantis_github_user        = "atlantis-bot"
hide_prev_plan_comments     = true
terraform_version           = "1.5.0"

# =====================================
# DEPLOYMENT CHECKLIST
# =====================================

# Before running terraform apply:
# □ Create ACM certificate for your domain
# □ Update domain name (atlantis_host)
# □ Update organization/repository settings
# □ Create GitHub token in Secrets Manager
# □ Restrict allowed_cidr_blocks for security
# □ Review and adjust resource sizing
# □ Set up DNS (Route53 or external) to point to ALB