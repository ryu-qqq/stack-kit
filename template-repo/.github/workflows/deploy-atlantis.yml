# StackKit Atlantis + AI Reviewer 자동 배포 워크플로우
name: 🏗️ Deploy Atlantis Infrastructure

permissions:
  id-token: write   # OIDC 토큰 발급을 위해 필요
  contents: read    # 저장소 내용 읽기 권한

on:
  push:
    branches: [main]
    paths: 
      - 'config/**'
      - 'terraform/**'
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        default: 'deploy'
        type: choice
        options:
        - deploy
        - destroy
      environment:
        description: 'Target environment'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - staging
        - prod

env:
  TF_VERSION: "1.8.5"
  AWS_REGION: ${{ vars.AWS_REGION || 'ap-northeast-2' }}

jobs:
  validate-config:
    runs-on: ubuntu-latest
    outputs:
      org-name: ${{ steps.config.outputs.org-name }}
      environment: ${{ steps.config.outputs.environment }}
      has-secrets: ${{ steps.config.outputs.has-secrets }}
    steps:
    - uses: actions/checkout@v4
    
    - name: 📋 Validate Configuration
      id: config
      run: |
        # config.yml 파일에서 설정 읽기
        if [[ ! -f "config/config.yml" ]]; then
          echo "❌ config/config.yml 파일이 없습니다."
          echo "설정 가이드: https://github.com/your-org/stackkit-template#setup"
          exit 1
        fi
        
        # yq를 사용한 설정 파싱
        sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
        sudo chmod +x /usr/local/bin/yq
        
        ORG_NAME=$(yq '.organization.name' config/config.yml)
        ENVIRONMENT=$(yq '.environment.name' config/config.yml)
        
        echo "org-name=$ORG_NAME" >> $GITHUB_OUTPUT
        echo "environment=$ENVIRONMENT" >> $GITHUB_OUTPUT
        
        # 필수 시크릿 확인 (OIDC 사용)
        REQUIRED_SECRETS=("OPENAI_API_KEY" "SLACK_WEBHOOK_URL" "AWS_OIDC_ROLE_ARN")
        HAS_SECRETS=true
        
        # GitHub Secrets는 환경변수로 접근할 수 없으므로 설정 가이드만 출력
        echo "🔐 필수 GitHub Secrets 확인:"
        echo "- OPENAI_API_KEY: OpenAI API 키"
        echo "- SLACK_WEBHOOK_URL: Slack 웹훅 URL"
        echo "- AWS_OIDC_ROLE_ARN: AWS OIDC IAM 역할 ARN"
        echo "- GITHUB_TOKEN: GitHub Personal Access Token (Atlantis용)"
        
        # 실제 검증은 workflow 실행 시 확인됨
        echo "has-secrets=true" >> $GITHUB_OUTPUT

  build-ai-reviewer:
    runs-on: ubuntu-latest
    needs: validate-config
    steps:
    - uses: actions/checkout@v4
    
    - name: ☕ Setup Java 21
      uses: actions/setup-java@v4
      with:
        distribution: 'corretto'
        java-version: '21'
    
    - name: 🔧 Build AI Reviewer Lambda
      run: |
        cd ai-reviewer
        ./gradlew clean build
        
        # Lambda 패키지를 Terraform에서 참조할 수 있도록 복사
        mkdir -p ../terraform/lambda-packages
        cp build/libs/atlantis-ai-reviewer-*.jar ../terraform/lambda-packages/
        
        echo "🎉 AI Reviewer Lambda 빌드 완료"
    
    - name: 📦 Upload Lambda Artifact
      uses: actions/upload-artifact@v4
      with:
        name: ai-reviewer-lambda
        path: terraform/lambda-packages/
        retention-days: 7

  deploy-infrastructure:
    runs-on: ubuntu-latest
    needs: [validate-config, build-ai-reviewer]
    if: needs.validate-config.outputs.has-secrets == 'true'
    environment: ${{ needs.validate-config.outputs.environment }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: 📦 Download Lambda Artifact
      uses: actions/download-artifact@v4
      with:
        name: ai-reviewer-lambda
        path: terraform/lambda-packages/
    
    - name: 🔧 Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
    
    - name: ☁️ Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_OIDC_ROLE_ARN }}
        role-session-name: GitHubActions-StackKit-Atlantis
        aws-region: ${{ env.AWS_REGION }}
    
    - name: 🏗️ Initialize Terraform
      run: |
        cd terraform/environments/${{ needs.validate-config.outputs.environment }}
        
        # 백엔드 설정 생성
        cat > backend.tf << EOF
        terraform {
          backend "s3" {
            bucket = "${{ needs.validate-config.outputs.org-name }}-atlantis-terraform-state"
            key    = "atlantis-${{ needs.validate-config.outputs.environment }}.tfstate"
            region = "${{ env.AWS_REGION }}"
            
            dynamodb_table = "${{ needs.validate-config.outputs.org-name }}-atlantis-terraform-locks"
            encrypt        = true
          }
        }
        EOF
        
        # S3 버킷과 DynamoDB 테이블 생성 (없는 경우)
        aws s3 mb s3://${{ needs.validate-config.outputs.org-name }}-atlantis-terraform-state --region ${{ env.AWS_REGION }} || true
        aws dynamodb create-table \
          --table-name ${{ needs.validate-config.outputs.org-name }}-atlantis-terraform-locks \
          --attribute-definitions AttributeName=LockID,AttributeType=S \
          --key-schema AttributeName=LockID,KeyType=HASH \
          --billing-mode PAY_PER_REQUEST \
          --region ${{ env.AWS_REGION }} || true
        
        terraform init
    
    - name: 📋 Terraform Plan
      run: |
        cd terraform/environments/${{ needs.validate-config.outputs.environment }}
        
        # 환경 변수를 Terraform 변수로 전달
        export TF_VAR_github_token="${{ secrets.GITHUB_TOKEN }}"
        export TF_VAR_openai_api_key="${{ secrets.OPENAI_API_KEY }}"
        export TF_VAR_slack_webhook_url="${{ secrets.SLACK_WEBHOOK_URL }}"
        export TF_VAR_org_name="${{ needs.validate-config.outputs.org-name }}"
        export TF_VAR_environment="${{ needs.validate-config.outputs.environment }}"
        
        terraform plan -out=tfplan
        
        # Plan 요약을 PR 코멘트로 출력
        terraform show -json tfplan > plan.json
        
        echo "## 🏗️ Terraform Plan 요약" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        terraform show tfplan | head -50 >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
    
    - name: 🚀 Terraform Apply
      if: github.event_name != 'pull_request'
      run: |
        cd terraform/environments/${{ needs.validate-config.outputs.environment }}
        
        export TF_VAR_github_token="${{ secrets.GITHUB_TOKEN }}"
        export TF_VAR_openai_api_key="${{ secrets.OPENAI_API_KEY }}"
        export TF_VAR_slack_webhook_url="${{ secrets.SLACK_WEBHOOK_URL }}"
        export TF_VAR_org_name="${{ needs.validate-config.outputs.org-name }}"
        export TF_VAR_environment="${{ needs.validate-config.outputs.environment }}"
        
        terraform apply tfplan
        
        # 출력값을 저장하여 나중에 사용
        terraform output -json > outputs.json
        
        echo "## ✅ 배포 완료!" >> $GITHUB_STEP_SUMMARY
        echo "### 🔗 접속 정보" >> $GITHUB_STEP_SUMMARY
        echo "- **Atlantis URL**: $(terraform output -raw atlantis_url)" >> $GITHUB_STEP_SUMMARY
        echo "- **S3 Bucket**: $(terraform output -raw s3_bucket_name)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📋 다음 단계" >> $GITHUB_STEP_SUMMARY
        echo "1. GitHub Webhook 설정: $(terraform output -raw atlantis_url)/events" >> $GITHUB_STEP_SUMMARY
        echo "2. 프로젝트 레포에 \`atlantis.yaml\` 추가" >> $GITHUB_STEP_SUMMARY
        echo "3. PR 생성하여 AI 리뷰 테스트" >> $GITHUB_STEP_SUMMARY
    
    - name: 📤 Upload Terraform Outputs
      uses: actions/upload-artifact@v4
      with:
        name: terraform-outputs
        path: terraform/environments/${{ needs.validate-config.outputs.environment }}/outputs.json
        retention-days: 30

  setup-github-webhooks:
    runs-on: ubuntu-latest
    needs: [validate-config, deploy-infrastructure]
    if: success() && github.event_name != 'pull_request'
    steps:
    - uses: actions/checkout@v4
    
    - name: 📦 Download Terraform Outputs
      uses: actions/download-artifact@v4
      with:
        name: terraform-outputs
        path: ./
    
    - name: 🔗 Setup GitHub Webhook
      run: |
        # Terraform 출력에서 Atlantis URL 추출
        ATLANTIS_URL=$(jq -r '.atlantis_url.value' outputs.json)
        WEBHOOK_SECRET=$(jq -r '.webhook_secret.value' outputs.json)
        
        # GitHub Webhook 자동 설정
        curl -X POST \
          -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          -H "Accept: application/vnd.github.v3+json" \
          https://api.github.com/repos/${{ github.repository }}/hooks \
          -d '{
            "name": "web",
            "active": true,
            "events": ["push", "pull_request", "issue_comment", "pull_request_review"],
            "config": {
              "url": "'$ATLANTIS_URL'/events",
              "content_type": "json",
              "secret": "'$WEBHOOK_SECRET'"
            }
          }'
        
        echo "✅ GitHub Webhook이 자동으로 설정되었습니다!" >> $GITHUB_STEP_SUMMARY

  notify-completion:
    runs-on: ubuntu-latest
    needs: [validate-config, deploy-infrastructure, setup-github-webhooks]
    if: always()
    steps:
    - name: 🎉 Deployment Notification
      run: |
        if [[ "${{ needs.deploy-infrastructure.result }}" == "success" ]]; then
          echo "## 🎉 StackKit Atlantis 배포 완료!"
          echo ""
          echo "### 🚀 배포된 컴포넌트"
          echo "- ✅ Atlantis ECS 서비스"
          echo "- ✅ AI Reviewer Lambda 함수"
          echo "- ✅ S3 버킷 (Plan/Apply 저장)"
          echo "- ✅ SQS 큐 (이벤트 처리)"
          echo "- ✅ GitHub Webhook 연동"
          echo ""
          echo "### 📋 사용법"
          echo "1. 다른 프로젝트에서 Terraform 코드 작성"
          echo "2. PR 생성하면 자동으로 AI 리뷰 시작"
          echo "3. 승인 후 \`atlantis apply\` 코멘트로 배포"
        else
          echo "## ❌ 배포 실패"
          echo "로그를 확인하고 다시 시도해주세요."
        fi >> $GITHUB_STEP_SUMMARY